<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1318" onload="init(evt)" viewBox="0 0 1200 1318" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1318.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1301" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1301" > </text>
<g id="frames">
<g >
<title>futures_util::future::future::FutureExt::poll_unpin (209,318 samples, 83.37%)</title><rect x="197.2" y="837" width="983.8" height="15.0" fill="rgb(227,35,41)" rx="2" ry="2" />
<text  x="200.17" y="847.5" >futures_util::future::future::FutureExt::poll_unpin</text>
</g>
<g >
<title>deno::file_fetcher::SourceFileFetcher::fetch_remote_source (59 samples, 0.02%)</title><rect x="1181.1" y="501" width="0.3" height="15.0" fill="rgb(242,0,12)" rx="2" ry="2" />
<text  x="1184.08" y="511.5" ></text>
</g>
<g >
<title>_&lt;extern &quot;C&quot; fn(A0) .&gt; R as rusty_v8..support..CFnFrom&lt;F&gt;&gt;::mapping::c_fn (71 samples, 0.03%)</title><rect x="1188.2" y="805" width="0.3" height="15.0" fill="rgb(245,22,29)" rx="2" ry="2" />
<text  x="1191.19" y="815.5" ></text>
</g>
<g >
<title>serde_json::value::ser::_&lt;impl serde..ser..Serialize for serde_json..value..Value&gt;::serialize (23 samples, 0.01%)</title><rect x="1180.9" y="485" width="0.1" height="15.0" fill="rgb(248,124,10)" rx="2" ry="2" />
<text  x="1183.85" y="495.5" ></text>
</g>
<g >
<title>tokio::io::driver::Driver::turn (2,475 samples, 0.99%)</title><rect x="57.6" y="949" width="11.7" height="15.0" fill="rgb(241,2,48)" rx="2" ry="2" />
<text  x="60.63" y="959.5" ></text>
</g>
<g >
<title>_&lt;deno_core..es_isolate..EsIsolate as core..future..future..Future&gt;::poll (211,792 samples, 84.36%)</title><rect x="185.5" y="853" width="995.5" height="15.0" fill="rgb(239,80,18)" rx="2" ry="2" />
<text  x="188.54" y="863.5" >_&lt;deno_core..es_isolate..EsIsolate as core..future..future..Future&gt;::poll</text>
</g>
<g >
<title>_&lt;deno..tsc..TsCompiler as deno..source_maps..SourceMapGetter&gt;::get_source_map (55 samples, 0.02%)</title><rect x="732.4" y="469" width="0.3" height="15.0" fill="rgb(215,106,46)" rx="2" ry="2" />
<text  x="735.43" y="479.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::class_and_fn::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_fn_args_body::_{{closure}}::_{{closure}} (23 samples, 0.01%)</title><rect x="1181.8" y="469" width="0.1" height="15.0" fill="rgb(240,70,47)" rx="2" ry="2" />
<text  x="1184.81" y="479.5" ></text>
</g>
<g >
<title>serde_json::de::from_str (35 samples, 0.01%)</title><rect x="1181.1" y="453" width="0.2" height="15.0" fill="rgb(236,39,18)" rx="2" ry="2" />
<text  x="1184.15" y="463.5" ></text>
</g>
<g >
<title>rusty_v8::object::_&lt;impl rusty_v8..data..Object&gt;::get (193 samples, 0.08%)</title><rect x="732.2" y="741" width="0.9" height="15.0" fill="rgb(213,179,46)" rx="2" ry="2" />
<text  x="735.18" y="751.5" ></text>
</g>
<g >
<title>swc_ecma_visit::visit_module (27 samples, 0.01%)</title><rect x="1185.4" y="613" width="0.1" height="15.0" fill="rgb(208,192,10)" rx="2" ry="2" />
<text  x="1188.38" y="623.5" ></text>
</g>
<g >
<title>swc_ecma_visit::Visit::visit_module_item (22 samples, 0.01%)</title><rect x="1185.4" y="533" width="0.1" height="15.0" fill="rgb(218,161,27)" rx="2" ry="2" />
<text  x="1188.40" y="543.5" ></text>
</g>
<g >
<title>_&lt;core..marker..PhantomData&lt;T&gt; as serde..de..DeserializeSeed&gt;::deserialize (40 samples, 0.02%)</title><rect x="1185.9" y="421" width="0.1" height="15.0" fill="rgb(218,136,7)" rx="2" ry="2" />
<text  x="1188.85" y="431.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (25 samples, 0.01%)</title><rect x="1188.7" y="789" width="0.1" height="15.0" fill="rgb(221,147,51)" rx="2" ry="2" />
<text  x="1191.72" y="799.5" ></text>
</g>
<g >
<title>futures_util::future::future::FutureExt::poll_unpin (214,266 samples, 85.34%)</title><rect x="173.9" y="869" width="1007.1" height="15.0" fill="rgb(230,175,14)" rx="2" ry="2" />
<text  x="176.92" y="879.5" >futures_util::future::future::FutureExt::poll_unpin</text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_member_expr_or_new_expr (35 samples, 0.01%)</title><rect x="1184.0" y="277" width="0.1" height="15.0" fill="rgb(219,63,31)" rx="2" ry="2" />
<text  x="1186.98" y="287.5" ></text>
</g>
<g >
<title>_&lt;core..marker..PhantomData&lt;T&gt; as serde..de..DeserializeSeed&gt;::deserialize (28 samples, 0.01%)</title><rect x="1181.2" y="341" width="0.1" height="15.0" fill="rgb(226,5,32)" rx="2" ry="2" />
<text  x="1184.18" y="351.5" ></text>
</g>
<g >
<title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (82 samples, 0.03%)</title><rect x="732.4" y="517" width="0.4" height="15.0" fill="rgb(217,12,1)" rx="2" ry="2" />
<text  x="735.41" y="527.5" ></text>
</g>
<g >
<title>clap::app::App::get_matches_from_safe (58 samples, 0.02%)</title><rect x="10.1" y="1141" width="0.3" height="15.0" fill="rgb(232,161,46)" rx="2" ry="2" />
<text  x="13.08" y="1151.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::class_and_fn::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_fn_args_body (287 samples, 0.11%)</title><rect x="1181.8" y="501" width="1.4" height="15.0" fill="rgb(233,104,53)" rx="2" ry="2" />
<text  x="1184.80" y="511.5" ></text>
</g>
<g >
<title>_&lt;extern &quot;C&quot; fn(A0) .&gt; R as rusty_v8..support..CFnFrom&lt;F&gt;&gt;::mapping::c_fn (190 samples, 0.08%)</title><rect x="732.2" y="693" width="0.9" height="15.0" fill="rgb(241,180,2)" rx="2" ry="2" />
<text  x="735.20" y="703.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (24 samples, 0.01%)</title><rect x="1185.6" y="581" width="0.1" height="15.0" fill="rgb(228,167,53)" rx="2" ry="2" />
<text  x="1188.57" y="591.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::typescript::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_ts_type_or_type_predicate_ann::_{{closure}} (27 samples, 0.01%)</title><rect x="1183.0" y="453" width="0.2" height="15.0" fill="rgb(218,143,44)" rx="2" ry="2" />
<text  x="1186.03" y="463.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_assignment_expr_base (30 samples, 0.01%)</title><rect x="1182.9" y="325" width="0.1" height="15.0" fill="rgb(208,137,34)" rx="2" ry="2" />
<text  x="1185.88" y="335.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_concat (49 samples, 0.02%)</title><rect x="1184.8" y="421" width="0.2" height="15.0" fill="rgb(236,27,15)" rx="2" ry="2" />
<text  x="1187.76" y="431.5" ></text>
</g>
<g >
<title>deno_core::modules::RecursiveModuleLoad::prepare::_{{closure}} (1,454 samples, 0.58%)</title><rect x="1181.0" y="789" width="6.8" height="15.0" fill="rgb(213,19,46)" rx="2" ry="2" />
<text  x="1183.99" y="799.5" ></text>
</g>
<g >
<title>rusty_v8::script::_&lt;impl rusty_v8..data..Script&gt;::run::_{{closure}} (47 samples, 0.02%)</title><rect x="1189.6" y="805" width="0.3" height="15.0" fill="rgb(205,109,31)" rx="2" ry="2" />
<text  x="1192.64" y="815.5" ></text>
</g>
<g >
<title>swc_ecma_visit::visit_module_items (25 samples, 0.01%)</title><rect x="1185.4" y="581" width="0.1" height="15.0" fill="rgb(248,22,6)" rx="2" ry="2" />
<text  x="1188.39" y="591.5" ></text>
</g>
<g >
<title>std::sync::once::Once::call_once::_{{closure}} (132 samples, 0.05%)</title><rect x="1184.7" y="581" width="0.6" height="15.0" fill="rgb(237,81,15)" rx="2" ry="2" />
<text  x="1187.66" y="591.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_cond_expr (166 samples, 0.07%)</title><rect x="1183.7" y="485" width="0.8" height="15.0" fill="rgb(220,150,32)" rx="2" ry="2" />
<text  x="1186.74" y="495.5" ></text>
</g>
<g >
<title>clap::app::App::arg (32 samples, 0.01%)</title><rect x="10.8" y="1093" width="0.1" height="15.0" fill="rgb(220,200,14)" rx="2" ry="2" />
<text  x="13.80" y="1103.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_expr (37 samples, 0.01%)</title><rect x="1183.2" y="549" width="0.2" height="15.0" fill="rgb(241,194,43)" rx="2" ry="2" />
<text  x="1186.18" y="559.5" ></text>
</g>
<g >
<title>deno_core::core_isolate::check_promise_exceptions (204 samples, 0.08%)</title><rect x="732.1" y="805" width="1.0" height="15.0" fill="rgb(242,170,7)" rx="2" ry="2" />
<text  x="735.13" y="815.5" ></text>
</g>
<g >
<title>deno::tsc::TsCompiler::try_to_resolve_and_get_source_map (54 samples, 0.02%)</title><rect x="732.4" y="453" width="0.3" height="15.0" fill="rgb(252,198,25)" rx="2" ry="2" />
<text  x="735.43" y="463.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (23 samples, 0.01%)</title><rect x="1188.7" y="757" width="0.1" height="15.0" fill="rgb(254,222,9)" rx="2" ry="2" />
<text  x="1191.73" y="767.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (48 samples, 0.02%)</title><rect x="1179.3" y="597" width="0.2" height="15.0" fill="rgb(208,111,7)" rx="2" ry="2" />
<text  x="1182.28" y="607.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (1,429 samples, 0.57%)</title><rect x="1181.0" y="693" width="6.7" height="15.0" fill="rgb(242,67,33)" rx="2" ry="2" />
<text  x="1184.02" y="703.5" ></text>
</g>
<g >
<title>deno::flags::run_subcommand (40 samples, 0.02%)</title><rect x="10.5" y="1125" width="0.2" height="15.0" fill="rgb(225,106,26)" rx="2" ry="2" />
<text  x="13.55" y="1135.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (41 samples, 0.02%)</title><rect x="1188.8" y="821" width="0.2" height="15.0" fill="rgb(217,143,13)" rx="2" ry="2" />
<text  x="1191.84" y="831.5" ></text>
</g>
<g >
<title>tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on::_{{closure}}::_{{closure}} (231,033 samples, 92.02%)</title><rect x="104.1" y="965" width="1085.9" height="15.0" fill="rgb(228,28,10)" rx="2" ry="2" />
<text  x="107.15" y="975.5" >tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on::_{{closure}}::_{{closure}}</text>
</g>
<g >
<title>core::ops::function::Fn::call (53 samples, 0.02%)</title><rect x="731.6" y="629" width="0.2" height="15.0" fill="rgb(226,23,30)" rx="2" ry="2" />
<text  x="734.60" y="639.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (26 samples, 0.01%)</title><rect x="1188.6" y="773" width="0.1" height="15.0" fill="rgb(246,195,3)" rx="2" ry="2" />
<text  x="1191.56" y="783.5" ></text>
</g>
<g >
<title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (250,819 samples, 99.90%)</title><rect x="11.2" y="1061" width="1178.8" height="15.0" fill="rgb(215,43,16)" rx="2" ry="2" />
<text  x="14.16" y="1071.5" >tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text>
</g>
<g >
<title>core::ops::function::FnOnce::call_once (130 samples, 0.05%)</title><rect x="1184.7" y="549" width="0.6" height="15.0" fill="rgb(223,148,31)" rx="2" ry="2" />
<text  x="1187.67" y="559.5" ></text>
</g>
<g >
<title>_&lt;futures_util..future..future..map..Map&lt;Fut,F&gt; as core..future..future..Future&gt;::poll (4,550 samples, 1.81%)</title><rect x="1159.6" y="693" width="21.4" height="15.0" fill="rgb(216,47,14)" rx="2" ry="2" />
<text  x="1162.58" y="703.5" >_..</text>
</g>
<g >
<title>_&lt;alloc..sync..Arc&lt;T&gt; as core..ops..drop..Drop&gt;::drop (33 samples, 0.01%)</title><rect x="1188.5" y="885" width="0.2" height="15.0" fill="rgb(237,206,7)" rx="2" ry="2" />
<text  x="1191.53" y="895.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_lhs_expr (25 samples, 0.01%)</title><rect x="1182.3" y="37" width="0.1" height="15.0" fill="rgb(207,196,45)" rx="2" ry="2" />
<text  x="1185.28" y="47.5" ></text>
</g>
<g >
<title>_&lt;&amp;mut serde_json..de..Deserializer&lt;R&gt; as serde..de..Deserializer&gt;::deserialize_any (339 samples, 0.14%)</title><rect x="1186.1" y="405" width="1.6" height="15.0" fill="rgb(251,52,17)" rx="2" ry="2" />
<text  x="1189.06" y="415.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_assignment_expr_base (31 samples, 0.01%)</title><rect x="1182.6" y="117" width="0.1" height="15.0" fill="rgb(239,129,22)" rx="2" ry="2" />
<text  x="1185.57" y="127.5" ></text>
</g>
<g >
<title>deno::ops::net::op_listen (25 samples, 0.01%)</title><rect x="1188.3" y="677" width="0.1" height="15.0" fill="rgb(208,185,15)" rx="2" ry="2" />
<text  x="1191.29" y="687.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::class_and_fn::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_fn_args_body::_{{closure}} (286 samples, 0.11%)</title><rect x="1181.8" y="485" width="1.4" height="15.0" fill="rgb(217,189,29)" rx="2" ry="2" />
<text  x="1184.81" y="495.5" ></text>
</g>
<g >
<title>deno::file_fetcher::SourceFileFetcher::get_source_file::_{{closure}} (60 samples, 0.02%)</title><rect x="1181.1" y="517" width="0.3" height="15.0" fill="rgb(243,218,35)" rx="2" ry="2" />
<text  x="1184.08" y="527.5" ></text>
</g>
<g >
<title>deno::state::State::stateful_json_op_sync::_{{closure}} (113 samples, 0.05%)</title><rect x="731.6" y="645" width="0.5" height="15.0" fill="rgb(213,114,39)" rx="2" ry="2" />
<text  x="734.55" y="655.5" ></text>
</g>
<g >
<title>deno::tokio_util::run_basic (250,855 samples, 99.92%)</title><rect x="11.0" y="1173" width="1179.0" height="15.0" fill="rgb(253,32,4)" rx="2" ry="2" />
<text  x="13.99" y="1183.5" >deno::tokio_util::run_basic</text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_cond_expr (30 samples, 0.01%)</title><rect x="1182.6" y="101" width="0.1" height="15.0" fill="rgb(230,26,7)" rx="2" ry="2" />
<text  x="1185.58" y="111.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_bin_expr (162 samples, 0.06%)</title><rect x="1183.8" y="469" width="0.7" height="15.0" fill="rgb(235,42,2)" rx="2" ry="2" />
<text  x="1186.76" y="479.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (26 samples, 0.01%)</title><rect x="1185.6" y="613" width="0.1" height="15.0" fill="rgb(252,161,19)" rx="2" ry="2" />
<text  x="1188.56" y="623.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_args (73 samples, 0.03%)</title><rect x="1183.9" y="421" width="0.3" height="15.0" fill="rgb(206,73,0)" rx="2" ry="2" />
<text  x="1186.88" y="431.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (43 samples, 0.02%)</title><rect x="1188.8" y="853" width="0.2" height="15.0" fill="rgb(246,28,6)" rx="2" ry="2" />
<text  x="1191.83" y="863.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_stmt_internal (26 samples, 0.01%)</title><rect x="1183.5" y="501" width="0.2" height="15.0" fill="rgb(224,75,18)" rx="2" ry="2" />
<text  x="1186.54" y="511.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_new_expr (25 samples, 0.01%)</title><rect x="1182.9" y="245" width="0.1" height="15.0" fill="rgb(234,206,13)" rx="2" ry="2" />
<text  x="1185.90" y="255.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (24 samples, 0.01%)</title><rect x="1188.9" y="549" width="0.1" height="15.0" fill="rgb(233,60,25)" rx="2" ry="2" />
<text  x="1191.92" y="559.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (29 samples, 0.01%)</title><rect x="1188.9" y="629" width="0.1" height="15.0" fill="rgb(234,17,6)" rx="2" ry="2" />
<text  x="1191.90" y="639.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (66 samples, 0.03%)</title><rect x="1179.9" y="517" width="0.3" height="15.0" fill="rgb(227,25,43)" rx="2" ry="2" />
<text  x="1182.87" y="527.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_await_expr (27 samples, 0.01%)</title><rect x="1182.6" y="53" width="0.1" height="15.0" fill="rgb(211,143,4)" rx="2" ry="2" />
<text  x="1185.59" y="63.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_assignment_expr (52 samples, 0.02%)</title><rect x="1183.9" y="389" width="0.2" height="15.0" fill="rgb(214,219,25)" rx="2" ry="2" />
<text  x="1186.90" y="399.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_cond_expr (32 samples, 0.01%)</title><rect x="1182.3" y="117" width="0.1" height="15.0" fill="rgb(214,212,40)" rx="2" ry="2" />
<text  x="1185.25" y="127.5" ></text>
</g>
<g >
<title>_&lt;deno..state..State as deno_core..modules..ModuleLoader&gt;::prepare_load::_{{closure}} (1,433 samples, 0.57%)</title><rect x="1181.0" y="741" width="6.7" height="15.0" fill="rgb(246,34,45)" rx="2" ry="2" />
<text  x="1184.01" y="751.5" ></text>
</g>
<g >
<title>_&lt;core..slice..Iter&lt;T&gt; as core..iter..traits..iterator..Iterator&gt;::for_each (24 samples, 0.01%)</title><rect x="1185.4" y="565" width="0.1" height="15.0" fill="rgb(249,45,21)" rx="2" ry="2" />
<text  x="1188.39" y="575.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_bin_expr (43 samples, 0.02%)</title><rect x="1183.9" y="341" width="0.2" height="15.0" fill="rgb(217,179,48)" rx="2" ry="2" />
<text  x="1186.95" y="351.5" ></text>
</g>
<g >
<title>std::sys_common::backtrace::__rust_begin_short_backtrace (251,063 samples, 100.00%)</title><rect x="10.0" y="1221" width="1180.0" height="15.0" fill="rgb(209,132,12)" rx="2" ry="2" />
<text  x="13.01" y="1231.5" >std::sys_common::backtrace::__rust_begin_short_backtrace</text>
</g>
<g >
<title>core::ptr::drop_in_place (25 samples, 0.01%)</title><rect x="1185.6" y="597" width="0.1" height="15.0" fill="rgb(219,228,25)" rx="2" ry="2" />
<text  x="1188.56" y="607.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (99 samples, 0.04%)</title><rect x="1179.7" y="565" width="0.5" height="15.0" fill="rgb(216,220,6)" rx="2" ry="2" />
<text  x="1182.72" y="575.5" ></text>
</g>
<g >
<title>deno::flags::flags_from_vec_safe (193 samples, 0.08%)</title><rect x="10.1" y="1157" width="0.9" height="15.0" fill="rgb(210,108,35)" rx="2" ry="2" />
<text  x="13.08" y="1167.5" ></text>
</g>
<g >
<title>core::ops::function::Fn::call (65 samples, 0.03%)</title><rect x="1188.2" y="773" width="0.3" height="15.0" fill="rgb(236,49,54)" rx="2" ry="2" />
<text  x="1191.21" y="783.5" ></text>
</g>
<g >
<title>serde_json::value::to_value (89 samples, 0.04%)</title><rect x="1180.5" y="533" width="0.5" height="15.0" fill="rgb(247,108,44)" rx="2" ry="2" />
<text  x="1183.54" y="543.5" ></text>
</g>
<g >
<title>_&lt;alloc..rc..Rc&lt;T&gt; as core..ops..drop..Drop&gt;::drop (29 samples, 0.01%)</title><rect x="1188.7" y="853" width="0.1" height="15.0" fill="rgb(227,16,19)" rx="2" ry="2" />
<text  x="1191.70" y="863.5" ></text>
</g>
<g >
<title>deno::ops::net::accept_tcp::_{{closure}} (36 samples, 0.01%)</title><rect x="1179.3" y="581" width="0.2" height="15.0" fill="rgb(224,147,18)" rx="2" ry="2" />
<text  x="1182.34" y="591.5" ></text>
</g>
<g >
<title>core::ops::function::Fn::call (180 samples, 0.07%)</title><rect x="732.2" y="661" width="0.9" height="15.0" fill="rgb(231,183,46)" rx="2" ry="2" />
<text  x="735.25" y="671.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T&gt;::clear (36 samples, 0.01%)</title><rect x="1188.9" y="741" width="0.1" height="15.0" fill="rgb(213,134,28)" rx="2" ry="2" />
<text  x="1191.87" y="751.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_unary_expr (27 samples, 0.01%)</title><rect x="1182.9" y="277" width="0.1" height="15.0" fill="rgb(238,72,26)" rx="2" ry="2" />
<text  x="1185.89" y="287.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_args (25 samples, 0.01%)</title><rect x="1183.2" y="437" width="0.1" height="15.0" fill="rgb(206,16,49)" rx="2" ry="2" />
<text  x="1186.21" y="447.5" ></text>
</g>
<g >
<title>deno::main (251,061 samples, 100.00%)</title><rect x="10.0" y="1189" width="1180.0" height="15.0" fill="rgb(226,26,25)" rx="2" ry="2" />
<text  x="13.02" y="1199.5" >deno::main</text>
</g>
<g >
<title>deno_core::core_isolate::drain_macrotasks (132 samples, 0.05%)</title><rect x="733.1" y="805" width="0.6" height="15.0" fill="rgb(249,29,5)" rx="2" ry="2" />
<text  x="736.09" y="815.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (1,165 samples, 0.46%)</title><rect x="1175.5" y="661" width="5.5" height="15.0" fill="rgb(252,126,48)" rx="2" ry="2" />
<text  x="1178.49" y="671.5" ></text>
</g>
<g >
<title>futures_util::stream::stream::StreamExt::poll_next_unpin (68 samples, 0.03%)</title><rect x="1181.0" y="645" width="0.4" height="15.0" fill="rgb(220,215,12)" rx="2" ry="2" />
<text  x="1184.04" y="655.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_finally_block (26 samples, 0.01%)</title><rect x="1182.7" y="357" width="0.2" height="15.0" fill="rgb(210,36,21)" rx="2" ry="2" />
<text  x="1185.74" y="367.5" ></text>
</g>
<g >
<title>deno_core::core_isolate::CoreIsolateState::dispatch_op (172 samples, 0.07%)</title><rect x="732.3" y="629" width="0.8" height="15.0" fill="rgb(233,208,14)" rx="2" ry="2" />
<text  x="735.28" y="639.5" ></text>
</g>
<g >
<title>deno::global_state::GlobalState::prepare_module_load::_{{closure}} (1,431 samples, 0.57%)</title><rect x="1181.0" y="709" width="6.7" height="15.0" fill="rgb(214,59,43)" rx="2" ry="2" />
<text  x="1184.02" y="719.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_assignment_expr_base (33 samples, 0.01%)</title><rect x="1182.2" y="133" width="0.2" height="15.0" fill="rgb(223,62,10)" rx="2" ry="2" />
<text  x="1185.25" y="143.5" ></text>
</g>
<g >
<title>clap::app::parser::Parser::propagate_globals (26 samples, 0.01%)</title><rect x="10.2" y="1109" width="0.1" height="15.0" fill="rgb(248,167,46)" rx="2" ry="2" />
<text  x="13.19" y="1119.5" ></text>
</g>
<g >
<title>deno::ops::dispatch_json::serialize_result (40 samples, 0.02%)</title><rect x="731.8" y="629" width="0.2" height="15.0" fill="rgb(250,218,25)" rx="2" ry="2" />
<text  x="734.85" y="639.5" ></text>
</g>
<g >
<title>all (251,065 samples, 100%)</title><rect x="10.0" y="1269" width="1180.0" height="15.0" fill="rgb(231,44,40)" rx="2" ry="2" />
<text  x="13.00" y="1279.5" ></text>
</g>
<g >
<title>deno::worker::Worker::preload_module::_{{closure}} (1,530 samples, 0.61%)</title><rect x="1181.0" y="853" width="7.2" height="15.0" fill="rgb(221,151,20)" rx="2" ry="2" />
<text  x="1183.98" y="863.5" ></text>
</g>
<g >
<title>_&lt;core..pin..Pin&lt;P&gt; as core..future..future..Future&gt;::poll (1,475 samples, 0.59%)</title><rect x="1174.0" y="677" width="7.0" height="15.0" fill="rgb(249,94,31)" rx="2" ry="2" />
<text  x="1177.03" y="687.5" ></text>
</g>
<g >
<title>serde_json::de::from_trait (44 samples, 0.02%)</title><rect x="731.3" y="613" width="0.3" height="15.0" fill="rgb(246,80,31)" rx="2" ry="2" />
<text  x="734.34" y="623.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_block_body (24 samples, 0.01%)</title><rect x="1182.8" y="325" width="0.1" height="15.0" fill="rgb(251,171,11)" rx="2" ry="2" />
<text  x="1185.75" y="335.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_assignment_expr_base (170 samples, 0.07%)</title><rect x="1183.7" y="501" width="0.8" height="15.0" fill="rgb(225,183,30)" rx="2" ry="2" />
<text  x="1186.72" y="511.5" ></text>
</g>
<g >
<title>alloc::sync::Arc&lt;T&gt;::drop_slow (32 samples, 0.01%)</title><rect x="1188.5" y="869" width="0.2" height="15.0" fill="rgb(236,212,38)" rx="2" ry="2" />
<text  x="1191.53" y="879.5" ></text>
</g>
<g >
<title>deno_core::resources::ResourceTable::close (33 samples, 0.01%)</title><rect x="731.7" y="597" width="0.1" height="15.0" fill="rgb(239,185,17)" rx="2" ry="2" />
<text  x="734.69" y="607.5" ></text>
</g>
<g >
<title>sourcemap::types::SourceMap::from_slice (22 samples, 0.01%)</title><rect x="732.7" y="437" width="0.1" height="15.0" fill="rgb(233,28,8)" rx="2" ry="2" />
<text  x="735.70" y="447.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_stmt (28 samples, 0.01%)</title><rect x="1183.5" y="533" width="0.2" height="15.0" fill="rgb(216,8,50)" rx="2" ry="2" />
<text  x="1186.53" y="543.5" ></text>
</g>
<g >
<title>_&lt;&amp;mut serde_json..de..Deserializer&lt;R&gt; as serde..de..Deserializer&gt;::deserialize_struct (32 samples, 0.01%)</title><rect x="1181.2" y="405" width="0.1" height="15.0" fill="rgb(225,66,40)" rx="2" ry="2" />
<text  x="1184.16" y="415.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (42 samples, 0.02%)</title><rect x="1188.8" y="837" width="0.2" height="15.0" fill="rgb(224,32,3)" rx="2" ry="2" />
<text  x="1191.84" y="847.5" ></text>
</g>
<g >
<title>serde_json::ser::to_vec (25 samples, 0.01%)</title><rect x="732.8" y="565" width="0.1" height="15.0" fill="rgb(254,141,42)" rx="2" ry="2" />
<text  x="735.82" y="575.5" ></text>
</g>
<g >
<title>std::rt::lang_start (251,065 samples, 100.00%)</title><rect x="10.0" y="1253" width="1180.0" height="15.0" fill="rgb(253,160,37)" rx="2" ry="2" />
<text  x="13.00" y="1263.5" >std::rt::lang_start</text>
</g>
<g >
<title>lazy_static::lazy::Lazy&lt;T&gt;::get::_{{closure}} (131 samples, 0.05%)</title><rect x="1184.7" y="565" width="0.6" height="15.0" fill="rgb(238,96,23)" rx="2" ry="2" />
<text  x="1187.66" y="575.5" ></text>
</g>
<g >
<title>_&lt;serde_json..de..MapAccess&lt;R&gt; as serde..de..MapAccess&gt;::next_value_seed (394 samples, 0.16%)</title><rect x="1185.8" y="549" width="1.9" height="15.0" fill="rgb(228,162,3)" rx="2" ry="2" />
<text  x="1188.80" y="559.5" ></text>
</g>
<g >
<title>deno::source_maps::parse_map_string (80 samples, 0.03%)</title><rect x="732.4" y="485" width="0.4" height="15.0" fill="rgb(238,10,40)" rx="2" ry="2" />
<text  x="735.42" y="495.5" ></text>
</g>
<g >
<title>_&lt;core..iter..adapters..Take&lt;I&gt; as core..iter..traits..iterator..Iterator&gt;::fold (24 samples, 0.01%)</title><rect x="1179.0" y="501" width="0.1" height="15.0" fill="rgb(239,54,3)" rx="2" ry="2" />
<text  x="1181.99" y="511.5" ></text>
</g>
<g >
<title>deno_core::core_isolate::CoreIsolate::execute (58 samples, 0.02%)</title><rect x="1189.6" y="853" width="0.3" height="15.0" fill="rgb(230,197,49)" rx="2" ry="2" />
<text  x="1192.59" y="863.5" ></text>
</g>
<g >
<title>deno_core::core_isolate::exception_to_err_result (203 samples, 0.08%)</title><rect x="732.1" y="789" width="1.0" height="15.0" fill="rgb(253,32,53)" rx="2" ry="2" />
<text  x="735.14" y="799.5" ></text>
</g>
<g >
<title>serde_json::map::Map&lt;alloc..string..String,serde_json..value..Value&gt;::insert (23 samples, 0.01%)</title><rect x="1187.5" y="373" width="0.2" height="15.0" fill="rgb(245,29,40)" rx="2" ry="2" />
<text  x="1190.55" y="383.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_await_expr (29 samples, 0.01%)</title><rect x="1182.3" y="69" width="0.1" height="15.0" fill="rgb(211,172,29)" rx="2" ry="2" />
<text  x="1185.27" y="79.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_if_stmt (33 samples, 0.01%)</title><rect x="1182.4" y="165" width="0.2" height="15.0" fill="rgb(222,34,20)" rx="2" ry="2" />
<text  x="1185.40" y="175.5" ></text>
</g>
<g >
<title>_&lt;futures_util..stream..futures_unordered..FuturesUnordered&lt;Fut&gt; as futures_core..stream..Stream&gt;::poll_next (67 samples, 0.03%)</title><rect x="1181.0" y="629" width="0.4" height="15.0" fill="rgb(251,76,45)" rx="2" ry="2" />
<text  x="1184.05" y="639.5" ></text>
</g>
<g >
<title>serde_json::value::ser::_&lt;impl serde..ser..Serialize for serde_json..value..Value&gt;::serialize (110 samples, 0.04%)</title><rect x="1179.7" y="581" width="0.5" height="15.0" fill="rgb(247,196,28)" rx="2" ry="2" />
<text  x="1182.66" y="591.5" ></text>
</g>
<g >
<title>regex::exec::ExecBuilder::parse (31 samples, 0.01%)</title><rect x="1185.1" y="485" width="0.1" height="15.0" fill="rgb(214,133,30)" rx="2" ry="2" />
<text  x="1188.09" y="495.5" ></text>
</g>
<g >
<title>deno::source_maps::get_mappings (86 samples, 0.03%)</title><rect x="732.4" y="533" width="0.4" height="15.0" fill="rgb(210,153,8)" rx="2" ry="2" />
<text  x="735.40" y="543.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (32 samples, 0.01%)</title><rect x="1188.9" y="677" width="0.1" height="15.0" fill="rgb(242,129,0)" rx="2" ry="2" />
<text  x="1191.89" y="687.5" ></text>
</g>
<g >
<title>futures_util::stream::stream::StreamExt::poll_next_unpin (95,160 samples, 37.90%)</title><rect x="733.7" y="805" width="447.3" height="15.0" fill="rgb(219,135,17)" rx="2" ry="2" />
<text  x="736.71" y="815.5" >futures_util::stream::stream::StreamExt::poll_next_unpin</text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_assignment_expr (185 samples, 0.07%)</title><rect x="1183.7" y="517" width="0.9" height="15.0" fill="rgb(216,95,8)" rx="2" ry="2" />
<text  x="1186.70" y="527.5" ></text>
</g>
<g >
<title>_&lt;&amp;mut serde_json..de..Deserializer&lt;R&gt; as serde..de..Deserializer&gt;::deserialize_any (391 samples, 0.16%)</title><rect x="1185.8" y="501" width="1.9" height="15.0" fill="rgb(234,49,33)" rx="2" ry="2" />
<text  x="1188.82" y="511.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c (46 samples, 0.02%)</title><rect x="1184.8" y="405" width="0.2" height="15.0" fill="rgb(242,112,30)" rx="2" ry="2" />
<text  x="1187.78" y="415.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_lhs_expr (26 samples, 0.01%)</title><rect x="1182.9" y="261" width="0.1" height="15.0" fill="rgb(239,201,17)" rx="2" ry="2" />
<text  x="1185.90" y="271.5" ></text>
</g>
<g >
<title>_&lt;deno_core..core_isolate..CoreIsolate as core..future..future..Future&gt;::poll (206,844 samples, 82.39%)</title><rect x="208.8" y="821" width="972.2" height="15.0" fill="rgb(242,179,25)" rx="2" ry="2" />
<text  x="211.80" y="831.5" >_&lt;deno_core..core_isolate..CoreIsolate as core..future..future..Future&gt;::poll</text>
</g>
<g >
<title>core::ptr::drop_in_place (31 samples, 0.01%)</title><rect x="1188.9" y="661" width="0.1" height="15.0" fill="rgb(225,84,1)" rx="2" ry="2" />
<text  x="1191.89" y="671.5" ></text>
</g>
<g >
<title>deno::worker::Worker::execute_module::_{{closure}} (1,607 samples, 0.64%)</title><rect x="1181.0" y="885" width="7.5" height="15.0" fill="rgb(206,223,21)" rx="2" ry="2" />
<text  x="1183.97" y="895.5" ></text>
</g>
<g >
<title>_&lt;core..marker..PhantomData&lt;T&gt; as serde..de..DeserializeSeed&gt;::deserialize (341 samples, 0.14%)</title><rect x="1186.1" y="437" width="1.6" height="15.0" fill="rgb(237,206,39)" rx="2" ry="2" />
<text  x="1189.05" y="447.5" ></text>
</g>
<g >
<title>rusty_v8::object::_&lt;impl rusty_v8..data..Object&gt;::get::_{{closure}} (191 samples, 0.08%)</title><rect x="732.2" y="709" width="0.9" height="15.0" fill="rgb(243,115,12)" rx="2" ry="2" />
<text  x="735.19" y="719.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_unary_expr (26 samples, 0.01%)</title><rect x="1182.3" y="53" width="0.1" height="15.0" fill="rgb(221,28,18)" rx="2" ry="2" />
<text  x="1185.27" y="63.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_cond_expr (29 samples, 0.01%)</title><rect x="1182.9" y="309" width="0.1" height="15.0" fill="rgb(225,195,31)" rx="2" ry="2" />
<text  x="1185.88" y="319.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (110 samples, 0.04%)</title><rect x="1188.5" y="901" width="0.5" height="15.0" fill="rgb(229,171,42)" rx="2" ry="2" />
<text  x="1191.52" y="911.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::_&lt;impl *mut T&gt;::drop_in_place (34 samples, 0.01%)</title><rect x="1188.9" y="709" width="0.1" height="15.0" fill="rgb(208,92,48)" rx="2" ry="2" />
<text  x="1191.88" y="719.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_stmt_like (621 samples, 0.25%)</title><rect x="1181.7" y="581" width="2.9" height="15.0" fill="rgb(221,91,50)" rx="2" ry="2" />
<text  x="1184.72" y="591.5" ></text>
</g>
<g >
<title>core::ops::function::Fn::call (26 samples, 0.01%)</title><rect x="1188.3" y="693" width="0.1" height="15.0" fill="rgb(233,32,54)" rx="2" ry="2" />
<text  x="1191.28" y="703.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_var_stmt (208 samples, 0.08%)</title><rect x="1183.7" y="549" width="0.9" height="15.0" fill="rgb(226,101,5)" rx="2" ry="2" />
<text  x="1186.66" y="559.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_assignment_expr (34 samples, 0.01%)</title><rect x="1182.2" y="149" width="0.2" height="15.0" fill="rgb(230,30,20)" rx="2" ry="2" />
<text  x="1185.25" y="159.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_assignment_expr_base (35 samples, 0.01%)</title><rect x="1183.2" y="517" width="0.2" height="15.0" fill="rgb(217,107,13)" rx="2" ry="2" />
<text  x="1186.19" y="527.5" ></text>
</g>
<g >
<title>deno_core::core_isolate::async_op_response (108,874 samples, 43.36%)</title><rect x="220.4" y="805" width="511.7" height="15.0" fill="rgb(220,47,40)" rx="2" ry="2" />
<text  x="223.43" y="815.5" >deno_core::core_isolate::async_op_response</text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_try_stmt (180 samples, 0.07%)</title><rect x="1182.0" y="373" width="0.9" height="15.0" fill="rgb(221,148,17)" rx="2" ry="2" />
<text  x="1185.02" y="383.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (27 samples, 0.01%)</title><rect x="1188.9" y="597" width="0.1" height="15.0" fill="rgb(206,57,16)" rx="2" ry="2" />
<text  x="1191.91" y="607.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::compile (81 samples, 0.03%)</title><rect x="1184.7" y="485" width="0.4" height="15.0" fill="rgb(219,220,28)" rx="2" ry="2" />
<text  x="1187.71" y="495.5" ></text>
</g>
<g >
<title>_&lt;alloc..vec..Vec&lt;T&gt; as core..ops..drop..Drop&gt;::drop (23 samples, 0.01%)</title><rect x="1185.6" y="565" width="0.1" height="15.0" fill="rgb(231,12,17)" rx="2" ry="2" />
<text  x="1188.57" y="575.5" ></text>
</g>
<g >
<title>tokio::runtime::basic_scheduler::enter::_{{closure}} (250,818 samples, 99.90%)</title><rect x="11.2" y="1045" width="1178.8" height="15.0" fill="rgb(238,194,8)" rx="2" ry="2" />
<text  x="14.16" y="1055.5" >tokio::runtime::basic_scheduler::enter::_{{closure}}</text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_block_body (24 samples, 0.01%)</title><rect x="1183.6" y="469" width="0.1" height="15.0" fill="rgb(233,159,14)" rx="2" ry="2" />
<text  x="1186.55" y="479.5" ></text>
</g>
<g >
<title>core::ops::function::Fn::call (98 samples, 0.04%)</title><rect x="732.3" y="581" width="0.5" height="15.0" fill="rgb(226,69,20)" rx="2" ry="2" />
<text  x="735.34" y="591.5" ></text>
</g>
<g >
<title>serde_json::ser::to_vec (30 samples, 0.01%)</title><rect x="731.9" y="613" width="0.1" height="15.0" fill="rgb(219,224,13)" rx="2" ry="2" />
<text  x="734.89" y="623.5" ></text>
</g>
<g >
<title>rusty_v8::function::_&lt;impl rusty_v8..support..MapFnFrom&lt;F&gt; for extern &quot;C&quot; fn(*const rusty_v8..function..FunctionCallbackInfo)&gt;::mapping::_{{closure}} (44 samples, 0.02%)</title><rect x="1189.7" y="773" width="0.2" height="15.0" fill="rgb(208,66,24)" rx="2" ry="2" />
<text  x="1192.65" y="783.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_lhs_expr (31 samples, 0.01%)</title><rect x="1183.2" y="453" width="0.2" height="15.0" fill="rgb(228,35,0)" rx="2" ry="2" />
<text  x="1186.21" y="463.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_stmt_like (129 samples, 0.05%)</title><rect x="1182.1" y="261" width="0.6" height="15.0" fill="rgb(218,52,8)" rx="2" ry="2" />
<text  x="1185.14" y="271.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_stmt_like (27 samples, 0.01%)</title><rect x="1183.5" y="517" width="0.2" height="15.0" fill="rgb(217,6,3)" rx="2" ry="2" />
<text  x="1186.54" y="527.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (1,529 samples, 0.61%)</title><rect x="1181.0" y="837" width="7.2" height="15.0" fill="rgb(205,71,17)" rx="2" ry="2" />
<text  x="1183.98" y="847.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_expr (35 samples, 0.01%)</title><rect x="1182.2" y="165" width="0.2" height="15.0" fill="rgb(242,17,13)" rx="2" ry="2" />
<text  x="1185.24" y="175.5" ></text>
</g>
<g >
<title>deno::http_cache::HttpCache::get (43 samples, 0.02%)</title><rect x="1181.1" y="469" width="0.2" height="15.0" fill="rgb(212,26,3)" rx="2" ry="2" />
<text  x="1184.11" y="479.5" ></text>
</g>
<g >
<title>_&lt;futures_util..future..future..Map&lt;Fut,F&gt; as core..future..future..Future&gt;::poll (33,552 samples, 13.36%)</title><rect x="1023.3" y="757" width="157.7" height="15.0" fill="rgb(217,52,14)" rx="2" ry="2" />
<text  x="1026.27" y="767.5" >_&lt;futures_util..futu..</text>
</g>
<g >
<title>tokio::coop::with_budget::_{{closure}} (233,507 samples, 93.01%)</title><rect x="92.5" y="981" width="1097.5" height="15.0" fill="rgb(207,211,8)" rx="2" ry="2" />
<text  x="95.52" y="991.5" >tokio::coop::with_budget::_{{closure}}</text>
</g>
<g >
<title>_&lt;tokio..time..driver..Driver&lt;T&gt; as tokio..park..Park&gt;::park (9,888 samples, 3.94%)</title><rect x="22.8" y="997" width="46.5" height="15.0" fill="rgb(249,116,48)" rx="2" ry="2" />
<text  x="25.79" y="1007.5" >_&lt;to..</text>
</g>
<g >
<title>core::ptr::drop_in_place (28 samples, 0.01%)</title><rect x="1185.5" y="645" width="0.2" height="15.0" fill="rgb(236,72,28)" rx="2" ry="2" />
<text  x="1188.55" y="655.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_unary_expr (145 samples, 0.06%)</title><rect x="1183.8" y="453" width="0.7" height="15.0" fill="rgb(250,89,46)" rx="2" ry="2" />
<text  x="1186.84" y="463.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_bin_expr (31 samples, 0.01%)</title><rect x="1182.3" y="101" width="0.1" height="15.0" fill="rgb(208,136,37)" rx="2" ry="2" />
<text  x="1185.26" y="111.5" ></text>
</g>
<g >
<title>_&lt;futures_util..stream..futures_unordered..FuturesUnordered&lt;Fut&gt; as futures_core..stream..Stream&gt;::poll_next (70,487 samples, 28.08%)</title><rect x="849.7" y="789" width="331.3" height="15.0" fill="rgb(246,173,54)" rx="2" ry="2" />
<text  x="852.67" y="799.5" >_&lt;futures_util..stream..futures_unordered..F..</text>
</g>
<g >
<title>serde_json::value::to_value (166 samples, 0.07%)</title><rect x="1180.2" y="613" width="0.8" height="15.0" fill="rgb(209,34,21)" rx="2" ry="2" />
<text  x="1183.18" y="623.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_unary_expr (28 samples, 0.01%)</title><rect x="1182.6" y="69" width="0.1" height="15.0" fill="rgb(217,165,39)" rx="2" ry="2" />
<text  x="1185.59" y="79.5" ></text>
</g>
<g >
<title>_&lt;alloc..rc..Rc&lt;T&gt; as core..ops..drop..Drop&gt;::drop (28 samples, 0.01%)</title><rect x="1188.9" y="613" width="0.1" height="15.0" fill="rgb(234,191,54)" rx="2" ry="2" />
<text  x="1191.90" y="623.5" ></text>
</g>
<g >
<title>_&lt;alloc..sync..Arc&lt;T&gt; as core..ops..drop..Drop&gt;::drop (22 samples, 0.01%)</title><rect x="1188.6" y="709" width="0.1" height="15.0" fill="rgb(249,154,32)" rx="2" ry="2" />
<text  x="1191.58" y="719.5" ></text>
</g>
<g >
<title>deno_core::core_isolate::CoreIsolate::register_op (24 samples, 0.01%)</title><rect x="1189.3" y="853" width="0.1" height="15.0" fill="rgb(233,66,47)" rx="2" ry="2" />
<text  x="1192.28" y="863.5" ></text>
</g>
<g >
<title>std::thread::local::LocalKey&lt;T&gt;::try_with (235,981 samples, 93.99%)</title><rect x="80.9" y="997" width="1109.1" height="15.0" fill="rgb(236,125,31)" rx="2" ry="2" />
<text  x="83.89" y="1007.5" >std::thread::local::LocalKey&lt;T&gt;::try_with</text>
</g>
<g >
<title>core::ops::function::FnOnce::call_once (251,062 samples, 100.00%)</title><rect x="10.0" y="1205" width="1180.0" height="15.0" fill="rgb(221,107,22)" rx="2" ry="2" />
<text  x="13.01" y="1215.5" >core::ops::function::FnOnce::call_once</text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_primary_expr (34 samples, 0.01%)</title><rect x="1184.0" y="261" width="0.1" height="15.0" fill="rgb(219,31,37)" rx="2" ry="2" />
<text  x="1186.99" y="271.5" ></text>
</g>
<g >
<title>deno_core::core_isolate::CoreIsolateState::dispatch_op (239 samples, 0.10%)</title><rect x="731.0" y="677" width="1.1" height="15.0" fill="rgb(221,90,32)" rx="2" ry="2" />
<text  x="733.98" y="687.5" ></text>
</g>
<g >
<title>deno::state::State::core_op::_{{closure}} (29 samples, 0.01%)</title><rect x="1189.7" y="709" width="0.1" height="15.0" fill="rgb(234,142,45)" rx="2" ry="2" />
<text  x="1192.69" y="719.5" ></text>
</g>
<g >
<title>deno::module_graph::ModuleGraphLoader::add_to_graph::_{{closure}} (952 samples, 0.38%)</title><rect x="1181.0" y="677" width="4.5" height="15.0" fill="rgb(230,72,50)" rx="2" ry="2" />
<text  x="1184.03" y="687.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (23 samples, 0.01%)</title><rect x="1188.9" y="533" width="0.1" height="15.0" fill="rgb(228,137,29)" rx="2" ry="2" />
<text  x="1191.93" y="543.5" ></text>
</g>
<g >
<title>serde_json::de::from_trait (34 samples, 0.01%)</title><rect x="1181.2" y="437" width="0.1" height="15.0" fill="rgb(211,216,33)" rx="2" ry="2" />
<text  x="1184.15" y="447.5" ></text>
</g>
<g >
<title>serde::de::MapAccess::next_value (343 samples, 0.14%)</title><rect x="1186.0" y="469" width="1.7" height="15.0" fill="rgb(217,101,14)" rx="2" ry="2" />
<text  x="1189.04" y="479.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::class_and_fn::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_fn::_{{closure}}::_{{closure}} (22 samples, 0.01%)</title><rect x="1181.8" y="453" width="0.1" height="15.0" fill="rgb(245,51,13)" rx="2" ry="2" />
<text  x="1184.82" y="463.5" ></text>
</g>
<g >
<title>_&lt;core..pin..Pin&lt;P&gt; as core..future..future..Future&gt;::poll (1,435 samples, 0.57%)</title><rect x="1181.0" y="773" width="6.7" height="15.0" fill="rgb(227,218,51)" rx="2" ry="2" />
<text  x="1184.00" y="783.5" ></text>
</g>
<g >
<title>deno::module_graph::ModuleGraphLoader::download_module::_{{closure}} (64 samples, 0.03%)</title><rect x="1181.1" y="581" width="0.3" height="15.0" fill="rgb(232,135,23)" rx="2" ry="2" />
<text  x="1184.06" y="591.5" ></text>
</g>
<g >
<title>deno::worker::Worker::execute2 (59 samples, 0.02%)</title><rect x="1189.6" y="869" width="0.3" height="15.0" fill="rgb(240,152,42)" rx="2" ry="2" />
<text  x="1192.58" y="879.5" ></text>
</g>
<g >
<title>deno_core::errors::get_property (194 samples, 0.08%)</title><rect x="732.2" y="757" width="0.9" height="15.0" fill="rgb(241,85,44)" rx="2" ry="2" />
<text  x="735.18" y="767.5" ></text>
</g>
<g >
<title>_&lt;serde_json..ser..Compound&lt;W,F&gt; as serde..ser..SerializeMap&gt;::serialize_value (88 samples, 0.04%)</title><rect x="1179.8" y="549" width="0.4" height="15.0" fill="rgb(228,206,34)" rx="2" ry="2" />
<text  x="1182.77" y="559.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (26 samples, 0.01%)</title><rect x="1188.7" y="805" width="0.1" height="15.0" fill="rgb(222,169,19)" rx="2" ry="2" />
<text  x="1191.71" y="815.5" ></text>
</g>
<g >
<title>futures_util::stream::try_stream::TryStreamExt::try_poll_next_unpin (22 samples, 0.01%)</title><rect x="1187.9" y="709" width="0.1" height="15.0" fill="rgb(235,96,4)" rx="2" ry="2" />
<text  x="1190.95" y="719.5" ></text>
</g>
<g >
<title>_&lt;serde_json..de..MapAccess&lt;R&gt; as serde..de..MapAccess&gt;::next_value_seed (29 samples, 0.01%)</title><rect x="1181.2" y="357" width="0.1" height="15.0" fill="rgb(247,228,14)" rx="2" ry="2" />
<text  x="1184.18" y="367.5" ></text>
</g>
<g >
<title>deno_core::bindings::send (40 samples, 0.02%)</title><rect x="1189.7" y="741" width="0.2" height="15.0" fill="rgb(208,131,17)" rx="2" ry="2" />
<text  x="1192.67" y="751.5" ></text>
</g>
<g >
<title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::clear (38 samples, 0.02%)</title><rect x="1188.9" y="773" width="0.1" height="15.0" fill="rgb(212,192,54)" rx="2" ry="2" />
<text  x="1191.86" y="783.5" ></text>
</g>
<g >
<title>_&lt;core..pin..Pin&lt;P&gt; as core..future..future..Future&gt;::poll (66 samples, 0.03%)</title><rect x="1181.1" y="613" width="0.3" height="15.0" fill="rgb(208,19,8)" rx="2" ry="2" />
<text  x="1184.05" y="623.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_subscript (45 samples, 0.02%)</title><rect x="1184.3" y="373" width="0.2" height="15.0" fill="rgb(211,143,6)" rx="2" ry="2" />
<text  x="1187.28" y="383.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::input::Buffer&lt;I&gt;::bump_inner (22 samples, 0.01%)</title><rect x="1181.6" y="565" width="0.1" height="15.0" fill="rgb(228,204,41)" rx="2" ry="2" />
<text  x="1184.62" y="575.5" ></text>
</g>
<g >
<title>_&lt;serde_json..de..MapAccess&lt;R&gt; as serde..de..MapAccess&gt;::next_value_seed (342 samples, 0.14%)</title><rect x="1186.0" y="453" width="1.7" height="15.0" fill="rgb(235,180,6)" rx="2" ry="2" />
<text  x="1189.05" y="463.5" ></text>
</g>
<g >
<title>_&lt;core..pin..Pin&lt;P&gt; as core..future..future..Future&gt;::poll (10,728 samples, 4.27%)</title><rect x="1130.5" y="725" width="50.5" height="15.0" fill="rgb(244,91,2)" rx="2" ry="2" />
<text  x="1133.54" y="735.5" >_&lt;cor..</text>
</g>
<g >
<title>rusty_v8::function::_&lt;impl rusty_v8..support..MapFnFrom&lt;F&gt; for extern &quot;C&quot; fn(*const rusty_v8..function..FunctionCallbackInfo)&gt;::mapping::_{{closure}} (68 samples, 0.03%)</title><rect x="1188.2" y="789" width="0.3" height="15.0" fill="rgb(247,199,16)" rx="2" ry="2" />
<text  x="1191.20" y="799.5" ></text>
</g>
<g >
<title>_&lt;futures_util..future..future..Map&lt;Fut,F&gt; as core..future..future..Future&gt;::poll (7,630 samples, 3.04%)</title><rect x="1145.1" y="709" width="35.9" height="15.0" fill="rgb(251,169,3)" rx="2" ry="2" />
<text  x="1148.10" y="719.5" >_&lt;f..</text>
</g>
<g >
<title>regex::compile::Compiler::c (52 samples, 0.02%)</title><rect x="1184.8" y="437" width="0.2" height="15.0" fill="rgb(250,94,42)" rx="2" ry="2" />
<text  x="1187.75" y="447.5" ></text>
</g>
<g >
<title>rusty_v8::function::_&lt;impl rusty_v8..support..MapFnFrom&lt;F&gt; for extern &quot;C&quot; fn(*const rusty_v8..function..FunctionCallbackInfo)&gt;::mapping::_{{closure}} (185 samples, 0.07%)</title><rect x="732.2" y="677" width="0.9" height="15.0" fill="rgb(219,138,39)" rx="2" ry="2" />
<text  x="735.22" y="687.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_var_declarator (38 samples, 0.02%)</title><rect x="1182.6" y="149" width="0.1" height="15.0" fill="rgb(240,135,43)" rx="2" ry="2" />
<text  x="1185.56" y="159.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_block_body (650 samples, 0.26%)</title><rect x="1181.6" y="597" width="3.0" height="15.0" fill="rgb(253,119,14)" rx="2" ry="2" />
<text  x="1184.59" y="607.5" ></text>
</g>
<g >
<title>serde::de::MapAccess::next_entry (46 samples, 0.02%)</title><rect x="1185.8" y="469" width="0.2" height="15.0" fill="rgb(238,43,25)" rx="2" ry="2" />
<text  x="1188.83" y="479.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::object::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_object (33 samples, 0.01%)</title><rect x="1184.0" y="245" width="0.1" height="15.0" fill="rgb(243,4,16)" rx="2" ry="2" />
<text  x="1186.99" y="255.5" ></text>
</g>
<g >
<title>_&lt;deno_core..modules..RecursiveModuleLoad as futures_core..stream..Stream&gt;::poll_next (23 samples, 0.01%)</title><rect x="1187.9" y="725" width="0.1" height="15.0" fill="rgb(232,86,44)" rx="2" ry="2" />
<text  x="1190.94" y="735.5" ></text>
</g>
<g >
<title>deno::state::State::core_op::_{{closure}} (200 samples, 0.08%)</title><rect x="731.1" y="661" width="1.0" height="15.0" fill="rgb(248,73,27)" rx="2" ry="2" />
<text  x="734.14" y="671.5" ></text>
</g>
<g >
<title>_&lt;futures_util..stream..stream..next..Next&lt;St&gt; as core..future..future..Future&gt;::poll (69 samples, 0.03%)</title><rect x="1181.0" y="661" width="0.4" height="15.0" fill="rgb(238,177,11)" rx="2" ry="2" />
<text  x="1184.04" y="671.5" ></text>
</g>
<g >
<title>deno::swc_util::AstParser::parse_module (671 samples, 0.27%)</title><rect x="1181.5" y="629" width="3.1" height="15.0" fill="rgb(245,18,8)" rx="2" ry="2" />
<text  x="1184.49" y="639.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_while_stmt (137 samples, 0.05%)</title><rect x="1182.1" y="293" width="0.6" height="15.0" fill="rgb(213,226,26)" rx="2" ry="2" />
<text  x="1185.10" y="303.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_stmt_internal (128 samples, 0.05%)</title><rect x="1182.1" y="245" width="0.6" height="15.0" fill="rgb(224,52,18)" rx="2" ry="2" />
<text  x="1185.14" y="255.5" ></text>
</g>
<g >
<title>std::thread::local::LocalKey&lt;T&gt;::with (238,455 samples, 94.98%)</title><rect x="69.3" y="1013" width="1120.7" height="15.0" fill="rgb(224,159,24)" rx="2" ry="2" />
<text  x="72.27" y="1023.5" >std::thread::local::LocalKey&lt;T&gt;::with</text>
</g>
<g >
<title>deno::source_maps::get_orig_position (90 samples, 0.04%)</title><rect x="732.4" y="549" width="0.4" height="15.0" fill="rgb(227,203,16)" rx="2" ry="2" />
<text  x="735.38" y="559.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (1,531 samples, 0.61%)</title><rect x="1181.0" y="869" width="7.2" height="15.0" fill="rgb(215,126,8)" rx="2" ry="2" />
<text  x="1183.97" y="879.5" ></text>
</g>
<g >
<title>_&lt;futures_util..stream..stream..next..Next&lt;St&gt; as core..future..future..Future&gt;::poll (47 samples, 0.02%)</title><rect x="1187.8" y="805" width="0.2" height="15.0" fill="rgb(221,154,4)" rx="2" ry="2" />
<text  x="1190.83" y="815.5" ></text>
</g>
<g >
<title>clap::app::App::get_matches_from_safe_borrow (48 samples, 0.02%)</title><rect x="10.1" y="1125" width="0.2" height="15.0" fill="rgb(237,89,30)" rx="2" ry="2" />
<text  x="13.09" y="1135.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_block (25 samples, 0.01%)</title><rect x="1182.7" y="341" width="0.2" height="15.0" fill="rgb(222,214,3)" rx="2" ry="2" />
<text  x="1185.75" y="351.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (74 samples, 0.03%)</title><rect x="1188.7" y="869" width="0.3" height="15.0" fill="rgb(238,11,33)" rx="2" ry="2" />
<text  x="1191.69" y="879.5" ></text>
</g>
<g >
<title>deno::state::State::core_op::_{{closure}} (59 samples, 0.02%)</title><rect x="1188.2" y="725" width="0.3" height="15.0" fill="rgb(229,124,46)" rx="2" ry="2" />
<text  x="1191.24" y="735.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (23 samples, 0.01%)</title><rect x="1188.6" y="725" width="0.1" height="15.0" fill="rgb(209,196,52)" rx="2" ry="2" />
<text  x="1191.58" y="735.5" ></text>
</g>
<g >
<title>serde::ser::impls::_&lt;impl serde..ser..Serialize for &amp;T&gt;::serialize (45 samples, 0.02%)</title><rect x="1180.8" y="501" width="0.2" height="15.0" fill="rgb(247,132,23)" rx="2" ry="2" />
<text  x="1183.75" y="511.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_stmt_like (139 samples, 0.06%)</title><rect x="1182.1" y="325" width="0.6" height="15.0" fill="rgb(254,208,44)" rx="2" ry="2" />
<text  x="1185.09" y="335.5" ></text>
</g>
<g >
<title>serde::ser::impls::_&lt;impl serde..ser..Serialize for &amp;T&gt;::serialize (155 samples, 0.06%)</title><rect x="1180.2" y="597" width="0.8" height="15.0" fill="rgb(220,86,12)" rx="2" ry="2" />
<text  x="1183.23" y="607.5" ></text>
</g>
<g >
<title>_&lt;alloc..vec..Vec&lt;T&gt; as core..iter..traits..collect..FromIterator&lt;T&gt;&gt;::from_iter (48 samples, 0.02%)</title><rect x="1178.9" y="565" width="0.2" height="15.0" fill="rgb(222,133,46)" rx="2" ry="2" />
<text  x="1181.88" y="575.5" ></text>
</g>
<g >
<title>_&lt;&amp;mut F as core..future..future..Future&gt;::poll (219,214 samples, 87.31%)</title><rect x="150.7" y="901" width="1030.3" height="15.0" fill="rgb(236,108,49)" rx="2" ry="2" />
<text  x="153.66" y="911.5" >_&lt;&amp;mut F as core..future..future..Future&gt;::poll</text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_block_body (231 samples, 0.09%)</title><rect x="1181.9" y="421" width="1.1" height="15.0" fill="rgb(246,154,26)" rx="2" ry="2" />
<text  x="1184.93" y="431.5" ></text>
</g>
<g >
<title>std::rt::lang_start::_{{closure}} (251,064 samples, 100.00%)</title><rect x="10.0" y="1237" width="1180.0" height="15.0" fill="rgb(251,129,51)" rx="2" ry="2" />
<text  x="13.00" y="1247.5" >std::rt::lang_start::_{{closure}}</text>
</g>
<g >
<title>rusty_v8::function::_&lt;impl rusty_v8..support..MapFnFrom&lt;F&gt; for extern &quot;C&quot; fn(*const rusty_v8..function..FunctionCallbackInfo)&gt;::mapping::_{{closure}} (74,289 samples, 29.59%)</title><rect x="382.9" y="725" width="349.2" height="15.0" fill="rgb(247,85,45)" rx="2" ry="2" />
<text  x="385.94" y="735.5" >rusty_v8::function::_&lt;impl rusty_v8..support..M..</text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_var_stmt (39 samples, 0.02%)</title><rect x="1182.6" y="165" width="0.1" height="15.0" fill="rgb(220,45,23)" rx="2" ry="2" />
<text  x="1185.56" y="175.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_bin_expr (33 samples, 0.01%)</title><rect x="1183.2" y="485" width="0.2" height="15.0" fill="rgb(233,143,7)" rx="2" ry="2" />
<text  x="1186.20" y="495.5" ></text>
</g>
<g >
<title>serde::de::MapAccess::next_value (395 samples, 0.16%)</title><rect x="1185.8" y="565" width="1.9" height="15.0" fill="rgb(229,81,11)" rx="2" ry="2" />
<text  x="1188.80" y="575.5" ></text>
</g>
<g >
<title>_&lt;alloc..boxed..Box&lt;[A]&gt; as core..iter..traits..collect..FromIterator&lt;A&gt;&gt;::from_iter (60 samples, 0.02%)</title><rect x="1178.8" y="597" width="0.3" height="15.0" fill="rgb(237,14,31)" rx="2" ry="2" />
<text  x="1181.82" y="607.5" ></text>
</g>
<g >
<title>serde_json::de::from_slice (55 samples, 0.02%)</title><rect x="731.3" y="629" width="0.3" height="15.0" fill="rgb(219,126,54)" rx="2" ry="2" />
<text  x="734.29" y="639.5" ></text>
</g>
<g >
<title>deno::tsc::parse_ts_reference (156 samples, 0.06%)</title><rect x="1184.6" y="629" width="0.8" height="15.0" fill="rgb(223,197,39)" rx="2" ry="2" />
<text  x="1187.64" y="639.5" ></text>
</g>
<g >
<title>_&lt;&amp;mut serde_json..de..Deserializer&lt;R&gt; as serde..de..Deserializer&gt;::deserialize_any (22 samples, 0.01%)</title><rect x="731.4" y="581" width="0.2" height="15.0" fill="rgb(253,76,8)" rx="2" ry="2" />
<text  x="734.45" y="591.5" ></text>
</g>
<g >
<title>rusty_v8::scope::HandleScope&lt;()&gt;::cast_local (48 samples, 0.02%)</title><rect x="1189.6" y="821" width="0.3" height="15.0" fill="rgb(238,180,47)" rx="2" ry="2" />
<text  x="1192.63" y="831.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::Parser&lt;I&gt;::parse_module (663 samples, 0.26%)</title><rect x="1181.5" y="613" width="3.1" height="15.0" fill="rgb(239,115,33)" rx="2" ry="2" />
<text  x="1184.53" y="623.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_stmt_internal (110 samples, 0.04%)</title><rect x="1182.2" y="181" width="0.5" height="15.0" fill="rgb(211,199,44)" rx="2" ry="2" />
<text  x="1185.23" y="191.5" ></text>
</g>
<g >
<title>deno::ops::errors::op_apply_source_map (94 samples, 0.04%)</title><rect x="732.4" y="565" width="0.4" height="15.0" fill="rgb(247,167,12)" rx="2" ry="2" />
<text  x="735.36" y="575.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_block_body (146 samples, 0.06%)</title><rect x="1182.1" y="341" width="0.6" height="15.0" fill="rgb(238,71,37)" rx="2" ry="2" />
<text  x="1185.06" y="351.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_new_expr (36 samples, 0.01%)</title><rect x="1184.0" y="293" width="0.1" height="15.0" fill="rgb(248,137,35)" rx="2" ry="2" />
<text  x="1186.98" y="303.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (1,432 samples, 0.57%)</title><rect x="1181.0" y="725" width="6.7" height="15.0" fill="rgb(238,110,34)" rx="2" ry="2" />
<text  x="1184.01" y="735.5" ></text>
</g>
<g >
<title>deno::source_maps::get_mappings::_{{closure}} (81 samples, 0.03%)</title><rect x="732.4" y="501" width="0.4" height="15.0" fill="rgb(206,151,10)" rx="2" ry="2" />
<text  x="735.42" y="511.5" ></text>
</g>
<g >
<title>std::sync::once::Once::call_once (133 samples, 0.05%)</title><rect x="1184.7" y="597" width="0.6" height="15.0" fill="rgb(252,167,36)" rx="2" ry="2" />
<text  x="1187.65" y="607.5" ></text>
</g>
<g >
<title>futures_util::stream::try_stream::TryStreamExt::try_poll_next_unpin (25 samples, 0.01%)</title><rect x="1187.9" y="757" width="0.1" height="15.0" fill="rgb(253,80,42)" rx="2" ry="2" />
<text  x="1190.93" y="767.5" ></text>
</g>
<g >
<title>deno_core::errors::JSError::from_v8_exception (195 samples, 0.08%)</title><rect x="732.2" y="773" width="0.9" height="15.0" fill="rgb(242,126,34)" rx="2" ry="2" />
<text  x="735.18" y="783.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::class_and_fn::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_fn::_{{closure}} (288 samples, 0.11%)</title><rect x="1181.8" y="517" width="1.4" height="15.0" fill="rgb(227,26,39)" rx="2" ry="2" />
<text  x="1184.80" y="527.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_block (127 samples, 0.05%)</title><rect x="1182.1" y="229" width="0.6" height="15.0" fill="rgb(217,100,7)" rx="2" ry="2" />
<text  x="1185.15" y="239.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_assignment_expr (23 samples, 0.01%)</title><rect x="1184.0" y="213" width="0.1" height="15.0" fill="rgb(245,12,40)" rx="2" ry="2" />
<text  x="1187.04" y="223.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_block (25 samples, 0.01%)</title><rect x="1183.5" y="485" width="0.2" height="15.0" fill="rgb(210,54,8)" rx="2" ry="2" />
<text  x="1186.55" y="495.5" ></text>
</g>
<g >
<title>deno::worker::MainWorker::new (76 samples, 0.03%)</title><rect x="1189.2" y="885" width="0.4" height="15.0" fill="rgb(254,1,20)" rx="2" ry="2" />
<text  x="1192.22" y="895.5" ></text>
</g>
<g >
<title>_&lt;core..pin..Pin&lt;P&gt; as core..future..future..Future&gt;::poll (228,559 samples, 91.04%)</title><rect x="115.8" y="949" width="1074.2" height="15.0" fill="rgb(231,149,40)" rx="2" ry="2" />
<text  x="118.78" y="959.5" >_&lt;core..pin..Pin&lt;P&gt; as core..future..future..Future&gt;::poll</text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_assignment_expr (31 samples, 0.01%)</title><rect x="1182.9" y="341" width="0.1" height="15.0" fill="rgb(211,74,36)" rx="2" ry="2" />
<text  x="1185.87" y="351.5" ></text>
</g>
<g >
<title>deno::flags::run_test_args (37 samples, 0.01%)</title><rect x="10.8" y="1109" width="0.2" height="15.0" fill="rgb(226,201,12)" rx="2" ry="2" />
<text  x="13.79" y="1119.5" ></text>
</g>
<g >
<title>_&lt;deno_core..modules..RecursiveModuleLoad as futures_core..stream..Stream&gt;::poll_next (45 samples, 0.02%)</title><rect x="1187.8" y="773" width="0.2" height="15.0" fill="rgb(244,178,7)" rx="2" ry="2" />
<text  x="1190.84" y="783.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_stmt_like (219 samples, 0.09%)</title><rect x="1182.0" y="405" width="1.0" height="15.0" fill="rgb(226,121,42)" rx="2" ry="2" />
<text  x="1184.99" y="415.5" ></text>
</g>
<g >
<title>deno::state::State::stateful_json_op_async::_{{closure}}::_{{closure}} (396 samples, 0.16%)</title><rect x="1179.1" y="645" width="1.9" height="15.0" fill="rgb(213,147,6)" rx="2" ry="2" />
<text  x="1182.10" y="655.5" ></text>
</g>
<g >
<title>_&lt;swc_ecma_parser..parser..Parser&lt;I&gt; as swc_ecma_parser..parser..class_and_fn..FnBodyParser&lt;core..option..Option&lt;swc_ecma_ast..stmt..BlockStmt&gt;&gt;&gt;::parse_fn_body_inner (233 samples, 0.09%)</title><rect x="1181.9" y="453" width="1.1" height="15.0" fill="rgb(219,161,33)" rx="2" ry="2" />
<text  x="1184.93" y="463.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_stmt_like (113 samples, 0.05%)</title><rect x="1182.2" y="197" width="0.5" height="15.0" fill="rgb(242,196,0)" rx="2" ry="2" />
<text  x="1185.21" y="207.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (63 samples, 0.03%)</title><rect x="1181.1" y="565" width="0.3" height="15.0" fill="rgb(221,183,6)" rx="2" ry="2" />
<text  x="1184.07" y="575.5" ></text>
</g>
<g >
<title>deno::state::State::core_op::_{{closure}} (168 samples, 0.07%)</title><rect x="732.3" y="613" width="0.8" height="15.0" fill="rgb(218,132,14)" rx="2" ry="2" />
<text  x="735.30" y="623.5" ></text>
</g>
<g >
<title>tokio::runtime::Runtime::block_on::_{{closure}} (250,822 samples, 99.90%)</title><rect x="11.1" y="1109" width="1178.9" height="15.0" fill="rgb(233,214,10)" rx="2" ry="2" />
<text  x="14.14" y="1119.5" >tokio::runtime::Runtime::block_on::_{{closure}}</text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_stmt (130 samples, 0.05%)</title><rect x="1182.1" y="277" width="0.6" height="15.0" fill="rgb(230,95,31)" rx="2" ry="2" />
<text  x="1185.13" y="287.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::class_and_fn::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_fn_body (234 samples, 0.09%)</title><rect x="1181.9" y="469" width="1.1" height="15.0" fill="rgb(220,224,10)" rx="2" ry="2" />
<text  x="1184.92" y="479.5" ></text>
</g>
<g >
<title>serde_json::de::from_str (400 samples, 0.16%)</title><rect x="1185.8" y="645" width="1.9" height="15.0" fill="rgb(226,92,19)" rx="2" ry="2" />
<text  x="1188.77" y="655.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_member_expr_or_new_expr (60 samples, 0.02%)</title><rect x="1184.2" y="405" width="0.3" height="15.0" fill="rgb(225,180,26)" rx="2" ry="2" />
<text  x="1187.24" y="415.5" ></text>
</g>
<g >
<title>deno_core::es_isolate::EsIsolate::mod_evaluate (75 samples, 0.03%)</title><rect x="1188.2" y="869" width="0.3" height="15.0" fill="rgb(254,21,25)" rx="2" ry="2" />
<text  x="1191.17" y="879.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_assignment_expr_base (49 samples, 0.02%)</title><rect x="1183.9" y="373" width="0.2" height="15.0" fill="rgb(249,197,1)" rx="2" ry="2" />
<text  x="1186.92" y="383.5" ></text>
</g>
<g >
<title>deno::flags::test_subcommand (49 samples, 0.02%)</title><rect x="10.7" y="1125" width="0.3" height="15.0" fill="rgb(205,211,52)" rx="2" ry="2" />
<text  x="13.74" y="1135.5" ></text>
</g>
<g >
<title>serde_json::value::de::_&lt;impl serde..de..Deserialize for serde_json..value..Value&gt;::deserialize (392 samples, 0.16%)</title><rect x="1185.8" y="517" width="1.9" height="15.0" fill="rgb(205,207,3)" rx="2" ry="2" />
<text  x="1188.81" y="527.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (25 samples, 0.01%)</title><rect x="1188.9" y="565" width="0.1" height="15.0" fill="rgb(225,76,39)" rx="2" ry="2" />
<text  x="1191.92" y="575.5" ></text>
</g>
<g >
<title>deno::ops::fs::init (25 samples, 0.01%)</title><rect x="1189.3" y="869" width="0.1" height="15.0" fill="rgb(236,101,36)" rx="2" ry="2" />
<text  x="1192.27" y="879.5" ></text>
</g>
<g >
<title>_&lt;extern &quot;C&quot; fn(A0) .&gt; R as rusty_v8..support..CFnFrom&lt;F&gt;&gt;::mapping::c_fn (46 samples, 0.02%)</title><rect x="1189.6" y="789" width="0.3" height="15.0" fill="rgb(226,161,29)" rx="2" ry="2" />
<text  x="1192.64" y="799.5" ></text>
</g>
<g >
<title>regex::exec::ExecBuilder::build (127 samples, 0.05%)</title><rect x="1184.7" y="501" width="0.6" height="15.0" fill="rgb(246,40,47)" rx="2" ry="2" />
<text  x="1187.68" y="511.5" ></text>
</g>
<g >
<title>_&lt;deno..tsc..XML_COMMENT_START_RE as core..ops..deref..Deref&gt;::deref (134 samples, 0.05%)</title><rect x="1184.6" y="613" width="0.7" height="15.0" fill="rgb(223,2,39)" rx="2" ry="2" />
<text  x="1187.65" y="623.5" ></text>
</g>
<g >
<title>_&lt;alloc..sync..Arc&lt;T&gt; as core..ops..drop..Drop&gt;::drop (22 samples, 0.01%)</title><rect x="1188.7" y="741" width="0.1" height="15.0" fill="rgb(244,135,44)" rx="2" ry="2" />
<text  x="1191.73" y="751.5" ></text>
</g>
<g >
<title>serde_json::ser::to_writer (121 samples, 0.05%)</title><rect x="1179.6" y="597" width="0.6" height="15.0" fill="rgb(230,2,28)" rx="2" ry="2" />
<text  x="1182.61" y="607.5" ></text>
</g>
<g >
<title>deno::worker::Worker::execute (62 samples, 0.02%)</title><rect x="1189.6" y="885" width="0.3" height="15.0" fill="rgb(212,225,26)" rx="2" ry="2" />
<text  x="1192.58" y="895.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (61 samples, 0.02%)</title><rect x="1181.1" y="533" width="0.3" height="15.0" fill="rgb(252,66,47)" rx="2" ry="2" />
<text  x="1184.07" y="543.5" ></text>
</g>
<g >
<title>_&lt;tokio..park..either..Either&lt;A,B&gt; as tokio..park..Park&gt;::park (7,415 samples, 2.95%)</title><rect x="34.4" y="981" width="34.9" height="15.0" fill="rgb(217,162,5)" rx="2" ry="2" />
<text  x="37.42" y="991.5" >_&lt;..</text>
</g>
<g >
<title>regex::re_builder::unicode::RegexBuilder::build (128 samples, 0.05%)</title><rect x="1184.7" y="517" width="0.6" height="15.0" fill="rgb(205,109,26)" rx="2" ry="2" />
<text  x="1187.67" y="527.5" ></text>
</g>
<g >
<title>deno::flags::run_test_args (37 samples, 0.01%)</title><rect x="10.6" y="1109" width="0.1" height="15.0" fill="rgb(254,102,21)" rx="2" ry="2" />
<text  x="13.56" y="1119.5" ></text>
</g>
<g >
<title>_&lt;core..marker..PhantomData&lt;T&gt; as serde..de..DeserializeSeed&gt;::deserialize (176 samples, 0.07%)</title><rect x="1186.7" y="325" width="0.8" height="15.0" fill="rgb(211,198,50)" rx="2" ry="2" />
<text  x="1189.69" y="335.5" ></text>
</g>
<g >
<title>deno::ops::net::op_accept::_{{closure}} (61 samples, 0.02%)</title><rect x="1179.2" y="613" width="0.3" height="15.0" fill="rgb(210,22,12)" rx="2" ry="2" />
<text  x="1182.22" y="623.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (22 samples, 0.01%)</title><rect x="11.0" y="1157" width="0.1" height="15.0" fill="rgb(214,227,10)" rx="2" ry="2" />
<text  x="13.99" y="1167.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (1,608 samples, 0.64%)</title><rect x="1181.0" y="901" width="7.5" height="15.0" fill="rgb(220,178,45)" rx="2" ry="2" />
<text  x="1183.96" y="911.5" ></text>
</g>
<g >
<title>clap::app::App::arg (32 samples, 0.01%)</title><rect x="10.6" y="1093" width="0.1" height="15.0" fill="rgb(221,120,14)" rx="2" ry="2" />
<text  x="13.57" y="1103.5" ></text>
</g>
<g >
<title>deno::ops::dispatch_json::serialize_result (42 samples, 0.02%)</title><rect x="732.8" y="581" width="0.2" height="15.0" fill="rgb(247,157,38)" rx="2" ry="2" />
<text  x="735.80" y="591.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_cond_expr (34 samples, 0.01%)</title><rect x="1183.2" y="501" width="0.2" height="15.0" fill="rgb(249,223,10)" rx="2" ry="2" />
<text  x="1186.19" y="511.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::typescript::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_ts_type_or_type_predicate_ann (28 samples, 0.01%)</title><rect x="1183.0" y="469" width="0.2" height="15.0" fill="rgb(207,219,9)" rx="2" ry="2" />
<text  x="1186.02" y="479.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (133 samples, 0.05%)</title><rect x="1180.3" y="565" width="0.7" height="15.0" fill="rgb(217,18,21)" rx="2" ry="2" />
<text  x="1183.34" y="575.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_var_declarator (32 samples, 0.01%)</title><rect x="1182.9" y="357" width="0.1" height="15.0" fill="rgb(215,135,39)" rx="2" ry="2" />
<text  x="1185.87" y="367.5" ></text>
</g>
<g >
<title>tokio::runtime::handle::Handle::enter (250,824 samples, 99.90%)</title><rect x="11.1" y="1141" width="1178.9" height="15.0" fill="rgb(238,172,54)" rx="2" ry="2" />
<text  x="14.13" y="1151.5" >tokio::runtime::handle::Handle::enter</text>
</g>
<g >
<title>serde::de::MapAccess::next_entry (308 samples, 0.12%)</title><rect x="1186.1" y="373" width="1.4" height="15.0" fill="rgb(254,194,13)" rx="2" ry="2" />
<text  x="1189.07" y="383.5" ></text>
</g>
<g >
<title>deno::run_command::_{{closure}} (223,611 samples, 89.06%)</title><rect x="139.0" y="917" width="1051.0" height="15.0" fill="rgb(246,28,39)" rx="2" ry="2" />
<text  x="142.03" y="927.5" >deno::run_command::_{{closure}}</text>
</g>
<g >
<title>serde::de::MapAccess::next_entry_seed (44 samples, 0.02%)</title><rect x="1185.8" y="453" width="0.2" height="15.0" fill="rgb(220,78,41)" rx="2" ry="2" />
<text  x="1188.84" y="463.5" ></text>
</g>
<g >
<title>_&lt;core..marker..PhantomData&lt;T&gt; as serde..de..DeserializeSeed&gt;::deserialize (393 samples, 0.16%)</title><rect x="1185.8" y="533" width="1.9" height="15.0" fill="rgb(243,16,51)" rx="2" ry="2" />
<text  x="1188.81" y="543.5" ></text>
</g>
<g >
<title>serde_json::value::de::_&lt;impl serde..de..Deserialize for serde_json..value..Value&gt;::deserialize (398 samples, 0.16%)</title><rect x="1185.8" y="613" width="1.9" height="15.0" fill="rgb(242,84,38)" rx="2" ry="2" />
<text  x="1188.78" y="623.5" ></text>
</g>
<g >
<title>_&lt;serde_json..value..de..&lt;impl serde..de..Deserialize for serde_json..value..Value&gt;..deserialize..ValueVisitor as serde..de..Visitor&gt;::visit_map (338 samples, 0.13%)</title><rect x="1186.1" y="389" width="1.6" height="15.0" fill="rgb(218,189,50)" rx="2" ry="2" />
<text  x="1189.07" y="399.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (27 samples, 0.01%)</title><rect x="1188.7" y="821" width="0.1" height="15.0" fill="rgb(216,104,4)" rx="2" ry="2" />
<text  x="1191.71" y="831.5" ></text>
</g>
<g >
<title>deno::flags::clap_root (131 samples, 0.05%)</title><rect x="10.4" y="1141" width="0.6" height="15.0" fill="rgb(217,218,39)" rx="2" ry="2" />
<text  x="13.36" y="1151.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (1,434 samples, 0.57%)</title><rect x="1181.0" y="757" width="6.7" height="15.0" fill="rgb(206,65,34)" rx="2" ry="2" />
<text  x="1184.00" y="767.5" ></text>
</g>
<g >
<title>_&lt;alloc..vec..Vec&lt;T&gt; as alloc..vec..SpecExtend&lt;T,I&gt;&gt;::from_iter (42 samples, 0.02%)</title><rect x="1178.9" y="549" width="0.2" height="15.0" fill="rgb(205,57,40)" rx="2" ry="2" />
<text  x="1181.90" y="559.5" ></text>
</g>
<g >
<title>deno::module_graph::ModuleGraphLoader::visit_module (881 samples, 0.35%)</title><rect x="1181.4" y="661" width="4.1" height="15.0" fill="rgb(211,77,6)" rx="2" ry="2" />
<text  x="1184.37" y="671.5" ></text>
</g>
<g >
<title>_&lt;rusty_v8..isolate..OwnedIsolate as core..ops..drop..Drop&gt;::drop (40 samples, 0.02%)</title><rect x="1188.8" y="805" width="0.2" height="15.0" fill="rgb(217,185,32)" rx="2" ry="2" />
<text  x="1191.85" y="815.5" ></text>
</g>
<g >
<title>deno::ops::resources::op_close (43 samples, 0.02%)</title><rect x="731.6" y="613" width="0.2" height="15.0" fill="rgb(251,113,11)" rx="2" ry="2" />
<text  x="734.64" y="623.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (31 samples, 0.01%)</title><rect x="1188.5" y="853" width="0.2" height="15.0" fill="rgb(246,220,17)" rx="2" ry="2" />
<text  x="1191.54" y="863.5" ></text>
</g>
<g >
<title>_&lt;serde..de..impls..&lt;impl serde..de..Deserialize for std..collections..hash..map..HashMap&lt;K,V,S&gt;&gt;..deserialize..MapVisitor&lt;K,V,S&gt; as serde..de..Visitor&gt;::visit_map (25 samples, 0.01%)</title><rect x="1181.2" y="293" width="0.1" height="15.0" fill="rgb(245,161,39)" rx="2" ry="2" />
<text  x="1184.20" y="303.5" ></text>
</g>
<g >
<title>deno::file_fetcher::SourceFileFetcher::fetch_source_file::_{{closure}} (62 samples, 0.02%)</title><rect x="1181.1" y="549" width="0.3" height="15.0" fill="rgb(243,110,49)" rx="2" ry="2" />
<text  x="1184.07" y="559.5" ></text>
</g>
<g >
<title>swc_ecma_visit::Visit::visit_module (28 samples, 0.01%)</title><rect x="1185.4" y="629" width="0.1" height="15.0" fill="rgb(207,117,6)" rx="2" ry="2" />
<text  x="1188.38" y="639.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::c_capture (55 samples, 0.02%)</title><rect x="1184.7" y="453" width="0.3" height="15.0" fill="rgb(236,168,4)" rx="2" ry="2" />
<text  x="1187.74" y="463.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::and_then (24 samples, 0.01%)</title><rect x="732.7" y="469" width="0.1" height="15.0" fill="rgb(239,139,2)" rx="2" ry="2" />
<text  x="735.69" y="479.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (25 samples, 0.01%)</title><rect x="1188.6" y="757" width="0.1" height="15.0" fill="rgb(226,76,31)" rx="2" ry="2" />
<text  x="1191.57" y="767.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_var_stmt (33 samples, 0.01%)</title><rect x="1182.9" y="373" width="0.1" height="15.0" fill="rgb(209,42,5)" rx="2" ry="2" />
<text  x="1185.87" y="383.5" ></text>
</g>
<g >
<title>_&lt;&amp;mut serde_json..de..Deserializer&lt;R&gt; as serde..de..Deserializer&gt;::deserialize_any (36 samples, 0.01%)</title><rect x="1185.9" y="389" width="0.1" height="15.0" fill="rgb(247,34,30)" rx="2" ry="2" />
<text  x="1188.87" y="399.5" ></text>
</g>
<g >
<title>serde_json::value::de::_&lt;impl serde..de..Deserialize for serde_json..value..Value&gt;::deserialize (33 samples, 0.01%)</title><rect x="731.4" y="597" width="0.2" height="15.0" fill="rgb(208,182,24)" rx="2" ry="2" />
<text  x="734.39" y="607.5" ></text>
</g>
<g >
<title>deno::tsc::TsCompiler::has_valid_cache (467 samples, 0.19%)</title><rect x="1185.5" y="661" width="2.2" height="15.0" fill="rgb(219,173,16)" rx="2" ry="2" />
<text  x="1188.54" y="671.5" ></text>
</g>
<g >
<title>deno_core::es_isolate::EsIsolate::register_during_load (24 samples, 0.01%)</title><rect x="1188.1" y="805" width="0.1" height="15.0" fill="rgb(215,21,30)" rx="2" ry="2" />
<text  x="1191.05" y="815.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (1,455 samples, 0.58%)</title><rect x="1181.0" y="805" width="6.8" height="15.0" fill="rgb(242,2,32)" rx="2" ry="2" />
<text  x="1183.99" y="815.5" ></text>
</g>
<g >
<title>tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (250,821 samples, 99.90%)</title><rect x="11.1" y="1093" width="1178.9" height="15.0" fill="rgb(223,223,53)" rx="2" ry="2" />
<text  x="14.15" y="1103.5" >tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on</text>
</g>
<g >
<title>rusty_v8::function::_&lt;impl rusty_v8..data..Function&gt;::call::_{{closure}} (101,455 samples, 40.41%)</title><rect x="255.3" y="757" width="476.8" height="15.0" fill="rgb(247,175,30)" rx="2" ry="2" />
<text  x="258.30" y="767.5" >rusty_v8::function::_&lt;impl rusty_v8..data..Function&gt;::call::_{{cl..</text>
</g>
<g >
<title>serde_json::value::ser::_&lt;impl serde..ser..Serialize for serde_json..value..Value&gt;::serialize (144 samples, 0.06%)</title><rect x="1180.3" y="581" width="0.7" height="15.0" fill="rgb(252,108,22)" rx="2" ry="2" />
<text  x="1183.29" y="591.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_var_declarator (204 samples, 0.08%)</title><rect x="1183.7" y="533" width="0.9" height="15.0" fill="rgb(242,123,32)" rx="2" ry="2" />
<text  x="1186.68" y="543.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::class_and_fn::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_async_fn_decl (296 samples, 0.12%)</title><rect x="1181.8" y="549" width="1.4" height="15.0" fill="rgb(245,216,10)" rx="2" ry="2" />
<text  x="1184.79" y="559.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (74 samples, 0.03%)</title><rect x="1179.2" y="629" width="0.3" height="15.0" fill="rgb(236,87,5)" rx="2" ry="2" />
<text  x="1182.16" y="639.5" ></text>
</g>
<g >
<title>deno::ops::io::op_write::_{{closure}} (48 samples, 0.02%)</title><rect x="1178.5" y="597" width="0.2" height="15.0" fill="rgb(228,39,41)" rx="2" ry="2" />
<text  x="1181.48" y="607.5" ></text>
</g>
<g >
<title>_&lt;serde_json..de..MapAccess&lt;R&gt; as serde..de..MapAccess&gt;::next_value_seed (42 samples, 0.02%)</title><rect x="1185.8" y="437" width="0.2" height="15.0" fill="rgb(242,113,23)" rx="2" ry="2" />
<text  x="1188.85" y="447.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_bin_expr (28 samples, 0.01%)</title><rect x="1182.9" y="293" width="0.1" height="15.0" fill="rgb(226,78,30)" rx="2" ry="2" />
<text  x="1185.89" y="303.5" ></text>
</g>
<g >
<title>_&lt;serde_json..ser..Compound&lt;W,F&gt; as serde..ser..SerializeMap&gt;::serialize_value (44 samples, 0.02%)</title><rect x="1180.0" y="501" width="0.2" height="15.0" fill="rgb(225,152,18)" rx="2" ry="2" />
<text  x="1182.97" y="511.5" ></text>
</g>
<g >
<title>_&lt;futures_util..future..future..map..Map&lt;Fut,F&gt; as core..future..future..Future&gt;::poll (21,667 samples, 8.63%)</title><rect x="1079.1" y="741" width="101.9" height="15.0" fill="rgb(243,111,39)" rx="2" ry="2" />
<text  x="1082.13" y="751.5" >_&lt;futures_ut..</text>
</g>
<g >
<title>_&lt;extern &quot;C&quot; fn(A0) .&gt; R as rusty_v8..support..CFnFrom&lt;F&gt;&gt;::mapping::c_fn (98,975 samples, 39.42%)</title><rect x="266.9" y="741" width="465.2" height="15.0" fill="rgb(244,32,33)" rx="2" ry="2" />
<text  x="269.92" y="751.5" >_&lt;extern "C" fn(A0) .&gt; R as rusty_v8..support..CFnFrom&lt;F&gt;&gt;::map..</text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_block_body (126 samples, 0.05%)</title><rect x="1182.2" y="213" width="0.5" height="15.0" fill="rgb(236,7,29)" rx="2" ry="2" />
<text  x="1185.15" y="223.5" ></text>
</g>
<g >
<title>_&lt;deno..ops..dispatch_minimal..ErrorRecord as core..convert..Into&lt;alloc..boxed..Box&lt;[u8]&gt;&gt;&gt;::into (72 samples, 0.03%)</title><rect x="1178.8" y="629" width="0.3" height="15.0" fill="rgb(207,62,26)" rx="2" ry="2" />
<text  x="1181.76" y="639.5" ></text>
</g>
<g >
<title>deno::state::State::stateful_json_op_sync::_{{closure}} (51 samples, 0.02%)</title><rect x="1188.3" y="709" width="0.2" height="15.0" fill="rgb(227,28,27)" rx="2" ry="2" />
<text  x="1191.28" y="719.5" ></text>
</g>
<g >
<title>serde::de::impls::_&lt;impl serde..de..Deserialize for std..collections..hash..map..HashMap&lt;K,V,S&gt;&gt;::deserialize (27 samples, 0.01%)</title><rect x="1181.2" y="325" width="0.1" height="15.0" fill="rgb(245,52,44)" rx="2" ry="2" />
<text  x="1184.19" y="335.5" ></text>
</g>
<g >
<title>_&lt;serde_json..value..de..&lt;impl serde..de..Deserialize for serde_json..value..Value&gt;..deserialize..ValueVisitor as serde..de..Visitor&gt;::visit_map (390 samples, 0.16%)</title><rect x="1185.8" y="485" width="1.9" height="15.0" fill="rgb(242,209,51)" rx="2" ry="2" />
<text  x="1188.82" y="495.5" ></text>
</g>
<g >
<title>regex::compile::Compiler::compile_one (78 samples, 0.03%)</title><rect x="1184.7" y="469" width="0.4" height="15.0" fill="rgb(250,175,28)" rx="2" ry="2" />
<text  x="1187.72" y="479.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (26 samples, 0.01%)</title><rect x="1188.9" y="581" width="0.1" height="15.0" fill="rgb(230,150,24)" rx="2" ry="2" />
<text  x="1191.91" y="591.5" ></text>
</g>
<g >
<title>tokio::runtime::basic_scheduler::enter (250,820 samples, 99.90%)</title><rect x="11.2" y="1077" width="1178.8" height="15.0" fill="rgb(224,29,2)" rx="2" ry="2" />
<text  x="14.15" y="1087.5" >tokio::runtime::basic_scheduler::enter</text>
</g>
<g >
<title>deno::tsc::TsCompiler::compile::_{{closure}} (475 samples, 0.19%)</title><rect x="1185.5" y="677" width="2.2" height="15.0" fill="rgb(237,22,35)" rx="2" ry="2" />
<text  x="1188.51" y="687.5" ></text>
</g>
<g >
<title>deno_core::core_isolate::CoreIsolateState::dispatch_op (61 samples, 0.02%)</title><rect x="1188.2" y="741" width="0.3" height="15.0" fill="rgb(231,225,14)" rx="2" ry="2" />
<text  x="1191.23" y="751.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (33 samples, 0.01%)</title><rect x="1188.9" y="693" width="0.1" height="15.0" fill="rgb(225,67,21)" rx="2" ry="2" />
<text  x="1191.88" y="703.5" ></text>
</g>
<g >
<title>_&lt;serde_json..value..de..&lt;impl serde..de..Deserialize for serde_json..value..Value&gt;..deserialize..ValueVisitor as serde..de..Visitor&gt;::visit_map (44 samples, 0.02%)</title><rect x="1187.3" y="277" width="0.2" height="15.0" fill="rgb(244,213,23)" rx="2" ry="2" />
<text  x="1190.31" y="287.5" ></text>
</g>
<g >
<title>serde::de::MapAccess::next_value (30 samples, 0.01%)</title><rect x="1181.2" y="373" width="0.1" height="15.0" fill="rgb(246,224,16)" rx="2" ry="2" />
<text  x="1184.17" y="383.5" ></text>
</g>
<g >
<title>tokio::runtime::Runtime::block_on (250,825 samples, 99.90%)</title><rect x="11.1" y="1157" width="1178.9" height="15.0" fill="rgb(250,129,40)" rx="2" ry="2" />
<text  x="14.13" y="1167.5" >tokio::runtime::Runtime::block_on</text>
</g>
<g >
<title>_&lt;&amp;mut serde_json..de..Deserializer&lt;R&gt; as serde..de..Deserializer&gt;::deserialize_any (88 samples, 0.04%)</title><rect x="1187.1" y="293" width="0.4" height="15.0" fill="rgb(241,101,8)" rx="2" ry="2" />
<text  x="1190.10" y="303.5" ></text>
</g>
<g >
<title>swc_ecma_visit::visit_module_items::_{{closure}} (23 samples, 0.01%)</title><rect x="1185.4" y="549" width="0.1" height="15.0" fill="rgb(224,224,51)" rx="2" ry="2" />
<text  x="1188.40" y="559.5" ></text>
</g>
<g >
<title>serde_json::value::de::_&lt;impl serde..de..Deserialize for serde_json..value..Value&gt;::deserialize (38 samples, 0.02%)</title><rect x="1185.9" y="405" width="0.1" height="15.0" fill="rgb(240,101,14)" rx="2" ry="2" />
<text  x="1188.86" y="415.5" ></text>
</g>
<g >
<title>rusty_v8::isolate::Isolate::dispose (39 samples, 0.02%)</title><rect x="1188.9" y="789" width="0.1" height="15.0" fill="rgb(210,54,21)" rx="2" ry="2" />
<text  x="1191.85" y="799.5" ></text>
</g>
<g >
<title>_&lt;tokio..io..driver..Driver as tokio..park..Park&gt;::park (4,945 samples, 1.97%)</title><rect x="46.0" y="965" width="23.3" height="15.0" fill="rgb(251,32,32)" rx="2" ry="2" />
<text  x="49.03" y="975.5" >_..</text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_cond_expr (46 samples, 0.02%)</title><rect x="1183.9" y="357" width="0.2" height="15.0" fill="rgb(232,99,0)" rx="2" ry="2" />
<text  x="1186.93" y="367.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (28 samples, 0.01%)</title><rect x="1188.7" y="837" width="0.1" height="15.0" fill="rgb(252,222,7)" rx="2" ry="2" />
<text  x="1191.70" y="847.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S&gt;::clear (37 samples, 0.01%)</title><rect x="1188.9" y="757" width="0.1" height="15.0" fill="rgb(247,226,7)" rx="2" ry="2" />
<text  x="1191.86" y="767.5" ></text>
</g>
<g >
<title>regex::re_unicode::Regex::new (129 samples, 0.05%)</title><rect x="1184.7" y="533" width="0.6" height="15.0" fill="rgb(228,75,54)" rx="2" ry="2" />
<text  x="1187.67" y="543.5" ></text>
</g>
<g >
<title>rusty_v8::scope::HandleScope&lt;()&gt;::cast_local (103,928 samples, 41.39%)</title><rect x="243.7" y="773" width="488.4" height="15.0" fill="rgb(248,156,22)" rx="2" ry="2" />
<text  x="246.67" y="783.5" >rusty_v8::scope::HandleScope&lt;()&gt;::cast_local</text>
</g>
<g >
<title>_&lt;deno..worker..Worker as core..future..future..Future&gt;::poll (216,740 samples, 86.33%)</title><rect x="162.3" y="885" width="1018.7" height="15.0" fill="rgb(215,45,38)" rx="2" ry="2" />
<text  x="165.29" y="895.5" >_&lt;deno..worker..Worker as core..future..future..Future&gt;::poll</text>
</g>
<g >
<title>tokio::runtime::context::enter (250,823 samples, 99.90%)</title><rect x="11.1" y="1125" width="1178.9" height="15.0" fill="rgb(239,52,47)" rx="2" ry="2" />
<text  x="14.14" y="1135.5" >tokio::runtime::context::enter</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect (66 samples, 0.03%)</title><rect x="1178.8" y="613" width="0.3" height="15.0" fill="rgb(225,174,8)" rx="2" ry="2" />
<text  x="1181.79" y="623.5" ></text>
</g>
<g >
<title>deno::file_fetcher::SourceFileFetcher::fetch_cached_remote_source (57 samples, 0.02%)</title><rect x="1181.1" y="485" width="0.3" height="15.0" fill="rgb(227,29,49)" rx="2" ry="2" />
<text  x="1184.09" y="495.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::input::Buffer&lt;I&gt;::cur (28 samples, 0.01%)</title><rect x="1181.6" y="581" width="0.1" height="15.0" fill="rgb(205,91,49)" rx="2" ry="2" />
<text  x="1184.59" y="591.5" ></text>
</g>
<g >
<title>_&lt;alloc..sync..Arc&lt;T&gt; as core..ops..drop..Drop&gt;::drop (28 samples, 0.01%)</title><rect x="1188.6" y="805" width="0.1" height="15.0" fill="rgb(231,225,51)" rx="2" ry="2" />
<text  x="1191.55" y="815.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (24 samples, 0.01%)</title><rect x="1188.6" y="741" width="0.1" height="15.0" fill="rgb(210,189,40)" rx="2" ry="2" />
<text  x="1191.57" y="751.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_block (147 samples, 0.06%)</title><rect x="1182.1" y="357" width="0.6" height="15.0" fill="rgb(218,69,32)" rx="2" ry="2" />
<text  x="1185.05" y="367.5" ></text>
</g>
<g >
<title>_&lt;alloc..vec..Vec&lt;T&gt; as alloc..vec..SpecExtend&lt;T,I&gt;&gt;::spec_extend (36 samples, 0.01%)</title><rect x="1178.9" y="533" width="0.2" height="15.0" fill="rgb(248,41,19)" rx="2" ry="2" />
<text  x="1181.93" y="543.5" ></text>
</g>
<g >
<title>serde::de::MapAccess::next_entry_seed (264 samples, 0.11%)</title><rect x="1186.3" y="357" width="1.2" height="15.0" fill="rgb(210,207,3)" rx="2" ry="2" />
<text  x="1189.28" y="367.5" ></text>
</g>
<g >
<title>rusty_v8::function::_&lt;impl rusty_v8..data..Function&gt;::call (106,401 samples, 42.38%)</title><rect x="232.1" y="789" width="500.0" height="15.0" fill="rgb(236,149,26)" rx="2" ry="2" />
<text  x="235.05" y="799.5" >rusty_v8::function::_&lt;impl rusty_v8..data..Function&gt;::call</text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (96 samples, 0.04%)</title><rect x="1178.3" y="613" width="0.4" height="15.0" fill="rgb(218,201,24)" rx="2" ry="2" />
<text  x="1181.25" y="623.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (65 samples, 0.03%)</title><rect x="1181.1" y="597" width="0.3" height="15.0" fill="rgb(249,57,3)" rx="2" ry="2" />
<text  x="1184.06" y="607.5" ></text>
</g>
<g >
<title>deno::tsc::pre_process_file (872 samples, 0.35%)</title><rect x="1181.4" y="645" width="4.1" height="15.0" fill="rgb(224,41,4)" rx="2" ry="2" />
<text  x="1184.41" y="655.5" ></text>
</g>
<g >
<title>serde_json::value::ser::_&lt;impl serde..ser..Serialize for serde_json..value..Value&gt;::serialize (77 samples, 0.03%)</title><rect x="1179.8" y="533" width="0.4" height="15.0" fill="rgb(212,67,48)" rx="2" ry="2" />
<text  x="1182.82" y="543.5" ></text>
</g>
<g >
<title>deno_core::bindings::send (176 samples, 0.07%)</title><rect x="732.3" y="645" width="0.8" height="15.0" fill="rgb(230,101,0)" rx="2" ry="2" />
<text  x="735.26" y="655.5" ></text>
</g>
<g >
<title>_&lt;&amp;mut serde_json..de..Deserializer&lt;R&gt; as serde..de..Deserializer&gt;::deserialize_any (397 samples, 0.16%)</title><rect x="1185.8" y="597" width="1.9" height="15.0" fill="rgb(252,121,10)" rx="2" ry="2" />
<text  x="1188.79" y="607.5" ></text>
</g>
<g >
<title>deno::flags::flags_from_vec (194 samples, 0.08%)</title><rect x="10.1" y="1173" width="0.9" height="15.0" fill="rgb(228,201,52)" rx="2" ry="2" />
<text  x="13.08" y="1183.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_unary_expr (30 samples, 0.01%)</title><rect x="1182.3" y="85" width="0.1" height="15.0" fill="rgb(213,187,29)" rx="2" ry="2" />
<text  x="1185.26" y="95.5" ></text>
</g>
<g >
<title>_&lt;deno..http_cache.._..&lt;impl serde..de..Deserialize for deno..http_cache..Metadata&gt;..deserialize..__Visitor as serde..de..Visitor&gt;::visit_map (31 samples, 0.01%)</title><rect x="1181.2" y="389" width="0.1" height="15.0" fill="rgb(226,184,39)" rx="2" ry="2" />
<text  x="1184.17" y="399.5" ></text>
</g>
<g >
<title>_&lt;tokio..park..either..Either&lt;A,B&gt; as tokio..park..Park&gt;::park (12,361 samples, 4.92%)</title><rect x="11.2" y="1013" width="58.1" height="15.0" fill="rgb(207,105,2)" rx="2" ry="2" />
<text  x="14.17" y="1023.5" >_&lt;toki..</text>
</g>
<g >
<title>alloc::sync::Arc&lt;T&gt;::drop_slow (27 samples, 0.01%)</title><rect x="1188.6" y="789" width="0.1" height="15.0" fill="rgb(247,28,28)" rx="2" ry="2" />
<text  x="1191.56" y="799.5" ></text>
</g>
<g >
<title>rusty_v8::script::_&lt;impl rusty_v8..data..Script&gt;::run (49 samples, 0.02%)</title><rect x="1189.6" y="837" width="0.3" height="15.0" fill="rgb(217,213,22)" rx="2" ry="2" />
<text  x="1192.63" y="847.5" ></text>
</g>
<g >
<title>deno::source_maps::parse_map_string::_{{closure}} (23 samples, 0.01%)</title><rect x="732.7" y="453" width="0.1" height="15.0" fill="rgb(218,107,7)" rx="2" ry="2" />
<text  x="735.69" y="463.5" ></text>
</g>
<g >
<title>deno_core::bindings::send (63 samples, 0.03%)</title><rect x="1188.2" y="757" width="0.3" height="15.0" fill="rgb(248,146,16)" rx="2" ry="2" />
<text  x="1191.22" y="767.5" ></text>
</g>
<g >
<title>_&lt;core..pin..Pin&lt;P&gt; as core..future..future..Future&gt;::poll (45,814 samples, 18.25%)</title><rect x="965.6" y="773" width="215.4" height="15.0" fill="rgb(207,210,48)" rx="2" ry="2" />
<text  x="968.64" y="783.5" >_&lt;core..pin..Pin&lt;P&gt; as core...</text>
</g>
<g >
<title>deno_core::core_isolate::CoreIsolateState::dispatch_op (38 samples, 0.02%)</title><rect x="1189.7" y="725" width="0.2" height="15.0" fill="rgb(252,87,10)" rx="2" ry="2" />
<text  x="1192.68" y="735.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_new_expr (64 samples, 0.03%)</title><rect x="1184.2" y="421" width="0.3" height="15.0" fill="rgb(241,107,18)" rx="2" ry="2" />
<text  x="1187.22" y="431.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_expr_or_spread (55 samples, 0.02%)</title><rect x="1183.9" y="405" width="0.2" height="15.0" fill="rgb(223,214,12)" rx="2" ry="2" />
<text  x="1186.89" y="415.5" ></text>
</g>
<g >
<title>deno::worker::MainWorker::create (157 samples, 0.06%)</title><rect x="1189.1" y="901" width="0.8" height="15.0" fill="rgb(206,111,9)" rx="2" ry="2" />
<text  x="1192.13" y="911.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_member_expr_or_new_expr (24 samples, 0.01%)</title><rect x="1182.9" y="229" width="0.1" height="15.0" fill="rgb(249,100,41)" rx="2" ry="2" />
<text  x="1185.91" y="239.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_stmt_internal (614 samples, 0.24%)</title><rect x="1181.8" y="565" width="2.8" height="15.0" fill="rgb(226,1,30)" rx="2" ry="2" />
<text  x="1184.76" y="575.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (22 samples, 0.01%)</title><rect x="1188.9" y="517" width="0.1" height="15.0" fill="rgb(248,109,37)" rx="2" ry="2" />
<text  x="1191.93" y="527.5" ></text>
</g>
<g >
<title>deno::state::State::stateful_json_op_sync::_{{closure}} (28 samples, 0.01%)</title><rect x="1189.7" y="693" width="0.1" height="15.0" fill="rgb(241,226,34)" rx="2" ry="2" />
<text  x="1192.69" y="703.5" ></text>
</g>
<g >
<title>serde_json::ser::to_vec (132 samples, 0.05%)</title><rect x="1179.6" y="613" width="0.6" height="15.0" fill="rgb(240,173,44)" rx="2" ry="2" />
<text  x="1182.56" y="623.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (30 samples, 0.01%)</title><rect x="1188.5" y="837" width="0.2" height="15.0" fill="rgb(230,200,34)" rx="2" ry="2" />
<text  x="1191.54" y="847.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_unary_expr (40 samples, 0.02%)</title><rect x="1184.0" y="325" width="0.1" height="15.0" fill="rgb(229,115,49)" rx="2" ry="2" />
<text  x="1186.96" y="335.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (23 samples, 0.01%)</title><rect x="731.7" y="581" width="0.1" height="15.0" fill="rgb(206,187,17)" rx="2" ry="2" />
<text  x="734.74" y="591.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_stmt_internal (138 samples, 0.05%)</title><rect x="1182.1" y="309" width="0.6" height="15.0" fill="rgb(254,46,54)" rx="2" ry="2" />
<text  x="1185.09" y="319.5" ></text>
</g>
<g >
<title>rusty_v8::scope::HandleScope&lt;()&gt;::cast_local (73 samples, 0.03%)</title><rect x="1188.2" y="837" width="0.3" height="15.0" fill="rgb(223,93,42)" rx="2" ry="2" />
<text  x="1191.18" y="847.5" ></text>
</g>
<g >
<title>futures_util::stream::stream::StreamExt::poll_next_unpin (46 samples, 0.02%)</title><rect x="1187.8" y="789" width="0.2" height="15.0" fill="rgb(238,75,5)" rx="2" ry="2" />
<text  x="1190.83" y="799.5" ></text>
</g>
<g >
<title>tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on::_{{closure}} (250,817 samples, 99.90%)</title><rect x="11.2" y="1029" width="1178.8" height="15.0" fill="rgb(218,9,52)" rx="2" ry="2" />
<text  x="14.17" y="1039.5" >tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on::_{{closure}}</text>
</g>
<g >
<title>deno::state::State::stateful_json_op_sync::_{{closure}} (164 samples, 0.07%)</title><rect x="732.3" y="597" width="0.8" height="15.0" fill="rgb(225,209,22)" rx="2" ry="2" />
<text  x="735.32" y="607.5" ></text>
</g>
<g >
<title>_&lt;serde_json..value..de..&lt;impl serde..de..Deserialize for serde_json..value..Value&gt;..deserialize..ValueVisitor as serde..de..Visitor&gt;::visit_map (396 samples, 0.16%)</title><rect x="1185.8" y="581" width="1.9" height="15.0" fill="rgb(218,33,48)" rx="2" ry="2" />
<text  x="1188.79" y="591.5" ></text>
</g>
<g >
<title>serde_json::value::ser::_&lt;impl serde..ser..Serialize for serde_json..value..Value&gt;::serialize (22 samples, 0.01%)</title><rect x="1180.1" y="485" width="0.1" height="15.0" fill="rgb(253,4,18)" rx="2" ry="2" />
<text  x="1183.08" y="495.5" ></text>
</g>
<g >
<title>_&lt;serde_json..de..MapAccess&lt;R&gt; as serde..de..MapAccess&gt;::next_value_seed (220 samples, 0.09%)</title><rect x="1186.5" y="341" width="1.0" height="15.0" fill="rgb(252,214,35)" rx="2" ry="2" />
<text  x="1189.48" y="351.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_assignment_expr (37 samples, 0.01%)</title><rect x="1182.6" y="133" width="0.1" height="15.0" fill="rgb(242,74,36)" rx="2" ry="2" />
<text  x="1185.57" y="143.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_lhs_expr (141 samples, 0.06%)</title><rect x="1183.9" y="437" width="0.6" height="15.0" fill="rgb(224,206,53)" rx="2" ry="2" />
<text  x="1186.86" y="447.5" ></text>
</g>
<g >
<title>_&lt;serde_json..value..ser..SerializeMap as serde..ser..SerializeMap&gt;::serialize_value (111 samples, 0.04%)</title><rect x="1180.4" y="549" width="0.6" height="15.0" fill="rgb(227,114,43)" rx="2" ry="2" />
<text  x="1183.44" y="559.5" ></text>
</g>
<g >
<title>core::ops::function::Fn::call (49,603 samples, 19.76%)</title><rect x="499.0" y="709" width="233.1" height="15.0" fill="rgb(239,36,37)" rx="2" ry="2" />
<text  x="501.97" y="719.5" >core::ops::function::Fn::call</text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (226,085 samples, 90.05%)</title><rect x="127.4" y="933" width="1062.6" height="15.0" fill="rgb(214,106,28)" rx="2" ry="2" />
<text  x="130.41" y="943.5" >_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll</text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_unary_expr (32 samples, 0.01%)</title><rect x="1183.2" y="469" width="0.2" height="15.0" fill="rgb(242,210,0)" rx="2" ry="2" />
<text  x="1186.20" y="479.5" ></text>
</g>
<g >
<title>rusty_v8::module::_&lt;impl rusty_v8..data..Module&gt;::evaluate (74 samples, 0.03%)</title><rect x="1188.2" y="853" width="0.3" height="15.0" fill="rgb(215,160,4)" rx="2" ry="2" />
<text  x="1191.17" y="863.5" ></text>
</g>
<g >
<title>_&lt;S as futures_core..stream..TryStream&gt;::try_poll_next (24 samples, 0.01%)</title><rect x="1187.9" y="741" width="0.1" height="15.0" fill="rgb(211,185,47)" rx="2" ry="2" />
<text  x="1190.94" y="751.5" ></text>
</g>
<g >
<title>deno_core::es_isolate::EsIsolate::load_module::_{{closure}} (1,528 samples, 0.61%)</title><rect x="1181.0" y="821" width="7.2" height="15.0" fill="rgb(214,98,49)" rx="2" ry="2" />
<text  x="1183.99" y="831.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (30 samples, 0.01%)</title><rect x="1188.9" y="645" width="0.1" height="15.0" fill="rgb(245,121,19)" rx="2" ry="2" />
<text  x="1191.90" y="655.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (29 samples, 0.01%)</title><rect x="1188.5" y="821" width="0.2" height="15.0" fill="rgb(218,91,39)" rx="2" ry="2" />
<text  x="1191.55" y="831.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (27 samples, 0.01%)</title><rect x="1185.6" y="629" width="0.1" height="15.0" fill="rgb(230,177,0)" rx="2" ry="2" />
<text  x="1188.55" y="639.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (75 samples, 0.03%)</title><rect x="1188.7" y="885" width="0.3" height="15.0" fill="rgb(230,75,22)" rx="2" ry="2" />
<text  x="1191.68" y="895.5" ></text>
</g>
<g >
<title>_&lt;core..pin..Pin&lt;P&gt; as core..future..future..Future&gt;::poll (164 samples, 0.07%)</title><rect x="1178.0" y="629" width="0.8" height="15.0" fill="rgb(244,219,42)" rx="2" ry="2" />
<text  x="1180.99" y="639.5" ></text>
</g>
<g >
<title>deno::http_cache::_::_&lt;impl serde..de..Deserialize for deno..http_cache..Metadata&gt;::deserialize (33 samples, 0.01%)</title><rect x="1181.2" y="421" width="0.1" height="15.0" fill="rgb(251,110,6)" rx="2" ry="2" />
<text  x="1184.16" y="431.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::ident::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_maybe_private_name (22 samples, 0.01%)</title><rect x="1184.4" y="357" width="0.1" height="15.0" fill="rgb(233,47,5)" rx="2" ry="2" />
<text  x="1187.39" y="367.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::class_and_fn::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_fn (295 samples, 0.12%)</title><rect x="1181.8" y="533" width="1.4" height="15.0" fill="rgb(241,88,11)" rx="2" ry="2" />
<text  x="1184.79" y="543.5" ></text>
</g>
<g >
<title>serde::ser::impls::_&lt;impl serde..ser..Serialize for &amp;T&gt;::serialize (67 samples, 0.03%)</title><rect x="1180.6" y="517" width="0.4" height="15.0" fill="rgb(229,25,1)" rx="2" ry="2" />
<text  x="1183.65" y="527.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_for_stmt (54 samples, 0.02%)</title><rect x="1183.4" y="549" width="0.3" height="15.0" fill="rgb(217,219,31)" rx="2" ry="2" />
<text  x="1186.41" y="559.5" ></text>
</g>
<g >
<title>rusty_v8::module::_&lt;impl rusty_v8..data..Module&gt;::evaluate::_{{closure}} (72 samples, 0.03%)</title><rect x="1188.2" y="821" width="0.3" height="15.0" fill="rgb(224,174,0)" rx="2" ry="2" />
<text  x="1191.18" y="831.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_block (232 samples, 0.09%)</title><rect x="1181.9" y="437" width="1.1" height="15.0" fill="rgb(251,83,6)" rx="2" ry="2" />
<text  x="1184.93" y="447.5" ></text>
</g>
<g >
<title>deno::ops::dispatch_json::serialize_result (309 samples, 0.12%)</title><rect x="1179.5" y="629" width="1.5" height="15.0" fill="rgb(230,198,42)" rx="2" ry="2" />
<text  x="1182.51" y="639.5" ></text>
</g>
<g >
<title>rusty_v8::scope::HandleScope&lt;()&gt;::cast_local (192 samples, 0.08%)</title><rect x="732.2" y="725" width="0.9" height="15.0" fill="rgb(217,29,41)" rx="2" ry="2" />
<text  x="735.19" y="735.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect (54 samples, 0.02%)</title><rect x="1178.8" y="581" width="0.3" height="15.0" fill="rgb(207,151,40)" rx="2" ry="2" />
<text  x="1181.85" y="591.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_lhs_expr (37 samples, 0.01%)</title><rect x="1184.0" y="309" width="0.1" height="15.0" fill="rgb(246,203,0)" rx="2" ry="2" />
<text  x="1186.97" y="319.5" ></text>
</g>
<g >
<title>core::ops::function::Fn::call (42 samples, 0.02%)</title><rect x="1189.7" y="757" width="0.2" height="15.0" fill="rgb(206,18,18)" rx="2" ry="2" />
<text  x="1192.66" y="767.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (22 samples, 0.01%)</title><rect x="1185.6" y="549" width="0.1" height="15.0" fill="rgb(211,224,31)" rx="2" ry="2" />
<text  x="1188.58" y="559.5" ></text>
</g>
<g >
<title>deno_core::bindings::send (24,921 samples, 9.93%)</title><rect x="615.0" y="693" width="117.1" height="15.0" fill="rgb(219,215,30)" rx="2" ry="2" />
<text  x="617.97" y="703.5" >deno_core::bin..</text>
</g>
<g >
<title>clap::app::parser::Parser::add_arg_ref (25 samples, 0.01%)</title><rect x="10.2" y="1093" width="0.1" height="15.0" fill="rgb(234,184,45)" rx="2" ry="2" />
<text  x="13.20" y="1103.5" ></text>
</g>
<g >
<title>serde_json::value::de::_&lt;impl serde..de..Deserialize for serde_json..value..Value&gt;::deserialize (132 samples, 0.05%)</title><rect x="1186.9" y="309" width="0.6" height="15.0" fill="rgb(229,134,7)" rx="2" ry="2" />
<text  x="1189.90" y="319.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (24 samples, 0.01%)</title><rect x="1188.7" y="773" width="0.1" height="15.0" fill="rgb(242,74,46)" rx="2" ry="2" />
<text  x="1191.72" y="783.5" ></text>
</g>
<g >
<title>serde_json::de::from_trait (399 samples, 0.16%)</title><rect x="1185.8" y="629" width="1.9" height="15.0" fill="rgb(208,95,15)" rx="2" ry="2" />
<text  x="1188.78" y="639.5" ></text>
</g>
<g >
<title>hashbrown::raw::Bucket&lt;T&gt;::drop (35 samples, 0.01%)</title><rect x="1188.9" y="725" width="0.1" height="15.0" fill="rgb(207,140,29)" rx="2" ry="2" />
<text  x="1191.87" y="735.5" ></text>
</g>
<g >
<title>deno::state::State::stateful_json_op_async::_{{closure}} (66 samples, 0.03%)</title><rect x="731.2" y="645" width="0.4" height="15.0" fill="rgb(210,66,26)" rx="2" ry="2" />
<text  x="734.24" y="655.5" ></text>
</g>
<g >
<title>swc_ecma_visit::Visit::visit_module_items (26 samples, 0.01%)</title><rect x="1185.4" y="597" width="0.1" height="15.0" fill="rgb(238,150,18)" rx="2" ry="2" />
<text  x="1188.38" y="607.5" ></text>
</g>
<g >
<title>_&lt;&amp;mut serde_json..de..Deserializer&lt;R&gt; as serde..de..Deserializer&gt;::deserialize_map (26 samples, 0.01%)</title><rect x="1181.2" y="309" width="0.1" height="15.0" fill="rgb(222,72,25)" rx="2" ry="2" />
<text  x="1184.19" y="319.5" ></text>
</g>
<g >
<title>deno::ops::dispatch_minimal::minimal_op::_{{closure}}::_{{closure}} (478 samples, 0.19%)</title><rect x="1176.9" y="645" width="2.2" height="15.0" fill="rgb(224,75,22)" rx="2" ry="2" />
<text  x="1179.85" y="655.5" ></text>
</g>
<g >
<title>serde_json::value::de::_&lt;impl serde..de..Deserialize for serde_json..value..Value&gt;::deserialize (340 samples, 0.14%)</title><rect x="1186.1" y="421" width="1.6" height="15.0" fill="rgb(250,171,26)" rx="2" ry="2" />
<text  x="1189.06" y="431.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_assignment_expr (36 samples, 0.01%)</title><rect x="1183.2" y="533" width="0.2" height="15.0" fill="rgb(241,190,52)" rx="2" ry="2" />
<text  x="1186.19" y="543.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::object::_&lt;impl swc_ecma_parser..parser..util..ParseObject&lt;alloc..boxed..Box&lt;swc_ecma_ast..expr..Expr&gt;&gt; for swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_object_prop (24 samples, 0.01%)</title><rect x="1184.0" y="229" width="0.1" height="15.0" fill="rgb(215,32,16)" rx="2" ry="2" />
<text  x="1187.04" y="239.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_stmt_internal (217 samples, 0.09%)</title><rect x="1182.0" y="389" width="1.0" height="15.0" fill="rgb(216,197,28)" rx="2" ry="2" />
<text  x="1185.00" y="399.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_subscripts (49 samples, 0.02%)</title><rect x="1184.3" y="389" width="0.2" height="15.0" fill="rgb(254,200,8)" rx="2" ry="2" />
<text  x="1187.26" y="399.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::for_each (30 samples, 0.01%)</title><rect x="1179.0" y="517" width="0.1" height="15.0" fill="rgb(207,222,16)" rx="2" ry="2" />
<text  x="1181.96" y="527.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_bin_expr (29 samples, 0.01%)</title><rect x="1182.6" y="85" width="0.1" height="15.0" fill="rgb(231,184,15)" rx="2" ry="2" />
<text  x="1185.58" y="95.5" ></text>
</g>
</g>
</svg>
