<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>swc_ecma_parser::parser::class_and_fn::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_fn_body (13 samples, 0.01%)</title><rect x="1188.0" y="85" width="0.2" height="15.0" fill="rgb(212,217,5)" rx="2" ry="2" />
<text  x="1191.03" y="95.5" ></text>
</g>
<g >
<title>std::sync::once::Once::call_once::_{{closure}} (10 samples, 0.01%)</title><rect x="1188.5" y="197" width="0.1" height="15.0" fill="rgb(232,130,35)" rx="2" ry="2" />
<text  x="1191.45" y="207.5" ></text>
</g>
<g >
<title>deno_core::core_isolate::exception_to_err_result (19 samples, 0.02%)</title><rect x="1187.5" y="261" width="0.2" height="15.0" fill="rgb(239,83,38)" rx="2" ry="2" />
<text  x="1190.52" y="271.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_unary_expr (13 samples, 0.01%)</title><rect x="1188.3" y="69" width="0.2" height="15.0" fill="rgb(233,116,32)" rx="2" ry="2" />
<text  x="1191.31" y="79.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::class_and_fn::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_async_fn_decl (16 samples, 0.01%)</title><rect x="1188.0" y="133" width="0.2" height="15.0" fill="rgb(209,194,7)" rx="2" ry="2" />
<text  x="1191.00" y="143.5" ></text>
</g>
<g >
<title>tokio::runtime::Runtime::block_on (108,897 samples, 99.99%)</title><rect x="10.1" y="341" width="1179.9" height="15.0" fill="rgb(234,201,19)" rx="2" ry="2" />
<text  x="13.13" y="351.5" >tokio::runtime::Runtime::block_on</text>
</g>
<g >
<title>core::ptr::drop_in_place (11 samples, 0.01%)</title><rect x="1189.1" y="197" width="0.1" height="15.0" fill="rgb(245,48,24)" rx="2" ry="2" />
<text  x="1192.12" y="207.5" ></text>
</g>
<g >
<title>_&lt;&amp;mut F as core..future..future..Future&gt;::poll (73,812 samples, 67.77%)</title><rect x="388.0" y="309" width="799.7" height="15.0" fill="rgb(234,197,0)" rx="2" ry="2" />
<text  x="391.00" y="319.5" >_&lt;&amp;mut F as core..future..future..Future&gt;::poll</text>
</g>
<g >
<title>_&lt;deno..worker..Worker as core..future..future..Future&gt;::poll (38,938 samples, 35.75%)</title><rect x="765.9" y="293" width="421.8" height="15.0" fill="rgb(250,28,45)" rx="2" ry="2" />
<text  x="768.85" y="303.5" >_&lt;deno..worker..Worker as core..future..future..Future&gt;::..</text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (104 samples, 0.10%)</title><rect x="1187.8" y="277" width="1.1" height="15.0" fill="rgb(219,86,8)" rx="2" ry="2" />
<text  x="1190.76" y="287.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (24 samples, 0.02%)</title><rect x="1189.3" y="277" width="0.2" height="15.0" fill="rgb(226,13,31)" rx="2" ry="2" />
<text  x="1192.26" y="287.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::ops::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_bin_expr (16 samples, 0.01%)</title><rect x="1188.3" y="85" width="0.2" height="15.0" fill="rgb(228,109,12)" rx="2" ry="2" />
<text  x="1191.28" y="95.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (11 samples, 0.01%)</title><rect x="1189.4" y="229" width="0.1" height="15.0" fill="rgb(239,219,52)" rx="2" ry="2" />
<text  x="1192.40" y="239.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_stmt_like (11 samples, 0.01%)</title><rect x="1188.0" y="53" width="0.2" height="15.0" fill="rgb(249,75,9)" rx="2" ry="2" />
<text  x="1191.05" y="63.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (26 samples, 0.02%)</title><rect x="1189.2" y="293" width="0.3" height="15.0" fill="rgb(223,140,23)" rx="2" ry="2" />
<text  x="1192.24" y="303.5" ></text>
</g>
<g >
<title>alloc::sync::Arc&lt;T&gt;::drop_slow (12 samples, 0.01%)</title><rect x="1189.4" y="245" width="0.1" height="15.0" fill="rgb(206,84,42)" rx="2" ry="2" />
<text  x="1192.39" y="255.5" ></text>
</g>
<g >
<title>alloc::sync::Arc&lt;T&gt;::drop_slow (15 samples, 0.01%)</title><rect x="1189.1" y="261" width="0.1" height="15.0" fill="rgb(205,195,40)" rx="2" ry="2" />
<text  x="1192.08" y="271.5" ></text>
</g>
<g >
<title>rusty_v8::function::_&lt;impl rusty_v8..data..Function&gt;::call (1,384 samples, 1.27%)</title><rect x="1172.5" y="261" width="15.0" height="15.0" fill="rgb(227,7,26)" rx="2" ry="2" />
<text  x="1175.51" y="271.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_var_stmt (26 samples, 0.02%)</title><rect x="1188.2" y="133" width="0.3" height="15.0" fill="rgb(226,82,54)" rx="2" ry="2" />
<text  x="1191.17" y="143.5" ></text>
</g>
<g >
<title>deno::worker::Worker::execute (11 samples, 0.01%)</title><rect x="1189.7" y="293" width="0.1" height="15.0" fill="rgb(231,221,41)" rx="2" ry="2" />
<text  x="1192.65" y="303.5" ></text>
</g>
<g >
<title>alloc::sync::Arc&lt;T&gt;::drop_slow (17 samples, 0.02%)</title><rect x="1189.1" y="293" width="0.1" height="15.0" fill="rgb(242,7,13)" rx="2" ry="2" />
<text  x="1192.06" y="303.5" ></text>
</g>
<g >
<title>all (108,909 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(225,118,30)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>alloc::sync::Arc&lt;T&gt;::drop_slow (12 samples, 0.01%)</title><rect x="1189.1" y="213" width="0.1" height="15.0" fill="rgb(246,32,32)" rx="2" ry="2" />
<text  x="1192.11" y="223.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::class_and_fn::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_fn_args_body (14 samples, 0.01%)</title><rect x="1188.0" y="101" width="0.2" height="15.0" fill="rgb(226,6,12)" rx="2" ry="2" />
<text  x="1191.02" y="111.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (13 samples, 0.01%)</title><rect x="1189.4" y="261" width="0.1" height="15.0" fill="rgb(224,0,29)" rx="2" ry="2" />
<text  x="1192.38" y="271.5" ></text>
</g>
<g >
<title>_&lt;futures_util..stream..futures_unordered..FuturesUnordered&lt;Fut&gt; as futures_core..stream..Stream&gt;::poll_next (61 samples, 0.06%)</title><rect x="1143.7" y="277" width="0.7" height="15.0" fill="rgb(229,131,45)" rx="2" ry="2" />
<text  x="1146.70" y="287.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_block (12 samples, 0.01%)</title><rect x="1188.0" y="69" width="0.2" height="15.0" fill="rgb(224,184,29)" rx="2" ry="2" />
<text  x="1191.04" y="79.5" ></text>
</g>
<g >
<title>deno_core::errors::get_property (17 samples, 0.02%)</title><rect x="1187.5" y="229" width="0.2" height="15.0" fill="rgb(254,115,40)" rx="2" ry="2" />
<text  x="1190.54" y="239.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (13 samples, 0.01%)</title><rect x="1189.1" y="229" width="0.1" height="15.0" fill="rgb(221,70,11)" rx="2" ry="2" />
<text  x="1192.10" y="239.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_stmt_internal (10 samples, 0.01%)</title><rect x="1188.1" y="37" width="0.1" height="15.0" fill="rgb(206,42,12)" rx="2" ry="2" />
<text  x="1191.06" y="47.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_lhs_expr (11 samples, 0.01%)</title><rect x="1188.3" y="53" width="0.2" height="15.0" fill="rgb(213,222,53)" rx="2" ry="2" />
<text  x="1191.33" y="63.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::class_and_fn::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_fn (15 samples, 0.01%)</title><rect x="1188.0" y="117" width="0.2" height="15.0" fill="rgb(220,135,54)" rx="2" ry="2" />
<text  x="1191.01" y="127.5" ></text>
</g>
<g >
<title>deno::flags::flags_from_vec_safe (10 samples, 0.01%)</title><rect x="10.0" y="341" width="0.1" height="15.0" fill="rgb(205,190,35)" rx="2" ry="2" />
<text  x="13.02" y="351.5" ></text>
</g>
<g >
<title>_&lt;futures_util..future..future..Map&lt;Fut,F&gt; as core..future..future..Future&gt;::poll (48 samples, 0.04%)</title><rect x="1143.8" y="261" width="0.6" height="15.0" fill="rgb(213,151,13)" rx="2" ry="2" />
<text  x="1146.84" y="271.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (71 samples, 0.07%)</title><rect x="1187.8" y="229" width="0.8" height="15.0" fill="rgb(222,107,35)" rx="2" ry="2" />
<text  x="1190.79" y="239.5" ></text>
</g>
<g >
<title>deno::worker::MainWorker::create (21 samples, 0.02%)</title><rect x="1189.6" y="309" width="0.2" height="15.0" fill="rgb(236,185,11)" rx="2" ry="2" />
<text  x="1192.58" y="319.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (12 samples, 0.01%)</title><rect x="1188.6" y="213" width="0.1" height="15.0" fill="rgb(225,161,13)" rx="2" ry="2" />
<text  x="1191.57" y="223.5" ></text>
</g>
<g >
<title>deno::state::State::core_op::_{{closure}} (12 samples, 0.01%)</title><rect x="1187.6" y="197" width="0.1" height="15.0" fill="rgb(251,174,38)" rx="2" ry="2" />
<text  x="1190.59" y="207.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (45 samples, 0.04%)</title><rect x="1189.0" y="309" width="0.5" height="15.0" fill="rgb(205,46,28)" rx="2" ry="2" />
<text  x="1192.04" y="319.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (97 samples, 0.09%)</title><rect x="1187.8" y="245" width="1.0" height="15.0" fill="rgb(231,146,29)" rx="2" ry="2" />
<text  x="1190.78" y="255.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (22 samples, 0.02%)</title><rect x="1144.1" y="229" width="0.3" height="15.0" fill="rgb(206,191,5)" rx="2" ry="2" />
<text  x="1147.13" y="239.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (16 samples, 0.01%)</title><rect x="1189.1" y="277" width="0.1" height="15.0" fill="rgb(225,59,22)" rx="2" ry="2" />
<text  x="1192.07" y="287.5" ></text>
</g>
<g >
<title>deno::swc_util::AstParser::parse_module (53 samples, 0.05%)</title><rect x="1187.9" y="197" width="0.6" height="15.0" fill="rgb(233,76,50)" rx="2" ry="2" />
<text  x="1190.88" y="207.5" ></text>
</g>
<g >
<title>deno::tsc::TsCompiler::compile::_{{closure}} (25 samples, 0.02%)</title><rect x="1188.6" y="229" width="0.2" height="15.0" fill="rgb(234,35,33)" rx="2" ry="2" />
<text  x="1191.56" y="239.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_assignment_expr (22 samples, 0.02%)</title><rect x="1188.2" y="117" width="0.3" height="15.0" fill="rgb(249,187,22)" rx="2" ry="2" />
<text  x="1191.21" y="127.5" ></text>
</g>
<g >
<title>deno_core::core_isolate::CoreIsolate::execute (10 samples, 0.01%)</title><rect x="1189.7" y="277" width="0.1" height="15.0" fill="rgb(207,156,17)" rx="2" ry="2" />
<text  x="1192.66" y="287.5" ></text>
</g>
<g >
<title>_&lt;futures_util..future..future..Map&lt;Fut,F&gt; as core..future..future..Future&gt;::poll (35 samples, 0.03%)</title><rect x="1144.0" y="245" width="0.4" height="15.0" fill="rgb(216,100,25)" rx="2" ry="2" />
<text  x="1146.98" y="255.5" ></text>
</g>
<g >
<title>std::sys_common::backtrace::__rust_begin_short_backtrace (108,909 samples, 100.00%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(217,67,17)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >std::sys_common::backtrace::__rust_begin_short_backtrace</text>
</g>
<g >
<title>core::ptr::drop_in_place (10 samples, 0.01%)</title><rect x="1189.4" y="213" width="0.1" height="15.0" fill="rgb(236,75,9)" rx="2" ry="2" />
<text  x="1192.41" y="223.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (98 samples, 0.09%)</title><rect x="1187.8" y="261" width="1.0" height="15.0" fill="rgb(214,184,40)" rx="2" ry="2" />
<text  x="1190.77" y="271.5" ></text>
</g>
<g >
<title>deno_core::core_isolate::check_promise_exceptions (20 samples, 0.02%)</title><rect x="1187.5" y="277" width="0.2" height="15.0" fill="rgb(246,106,38)" rx="2" ry="2" />
<text  x="1190.51" y="287.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (116 samples, 0.11%)</title><rect x="1187.7" y="293" width="1.3" height="15.0" fill="rgb(243,186,9)" rx="2" ry="2" />
<text  x="1190.75" y="303.5" ></text>
</g>
<g >
<title>_&lt;extern &quot;C&quot; fn(A0) .&gt; R as rusty_v8..support..CFnFrom&lt;F&gt;&gt;::mapping::c_fn (16 samples, 0.01%)</title><rect x="1187.6" y="213" width="0.1" height="15.0" fill="rgb(215,37,37)" rx="2" ry="2" />
<text  x="1190.55" y="223.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (11 samples, 0.01%)</title><rect x="1188.6" y="197" width="0.1" height="15.0" fill="rgb(221,62,47)" rx="2" ry="2" />
<text  x="1191.58" y="207.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_stmt_internal (48 samples, 0.04%)</title><rect x="1187.9" y="149" width="0.6" height="15.0" fill="rgb(205,211,21)" rx="2" ry="2" />
<text  x="1190.93" y="159.5" ></text>
</g>
<g >
<title>_&lt;tokio..park..either..Either&lt;A,B&gt; as tokio..park..Park&gt;::park (10 samples, 0.01%)</title><rect x="1189.9" y="325" width="0.1" height="15.0" fill="rgb(253,170,33)" rx="2" ry="2" />
<text  x="1192.89" y="335.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (10 samples, 0.01%)</title><rect x="1188.6" y="181" width="0.1" height="15.0" fill="rgb(249,76,45)" rx="2" ry="2" />
<text  x="1191.59" y="191.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (10 samples, 0.01%)</title><rect x="1189.1" y="181" width="0.1" height="15.0" fill="rgb(209,148,14)" rx="2" ry="2" />
<text  x="1192.13" y="191.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place (14 samples, 0.01%)</title><rect x="1189.1" y="245" width="0.1" height="15.0" fill="rgb(213,23,5)" rx="2" ry="2" />
<text  x="1192.09" y="255.5" ></text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (108,886 samples, 99.98%)</title><rect x="10.1" y="325" width="1179.8" height="15.0" fill="rgb(239,4,22)" rx="2" ry="2" />
<text  x="13.14" y="335.5" >_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll</text>
</g>
<g >
<title>deno::tsc::pre_process_file (64 samples, 0.06%)</title><rect x="1187.9" y="213" width="0.7" height="15.0" fill="rgb(206,71,27)" rx="2" ry="2" />
<text  x="1190.87" y="223.5" ></text>
</g>
<g >
<title>deno_core::core_isolate::async_op_response (3,979 samples, 3.65%)</title><rect x="1144.4" y="277" width="43.1" height="15.0" fill="rgb(225,190,49)" rx="2" ry="2" />
<text  x="1147.40" y="287.5" >deno..</text>
</g>
<g >
<title>deno::main (108,908 samples, 100.00%)</title><rect x="10.0" y="357" width="1180.0" height="15.0" fill="rgb(220,8,51)" rx="2" ry="2" />
<text  x="13.01" y="367.5" >deno::main</text>
</g>
<g >
<title>_&lt;core..future..from_generator..GenFuture&lt;T&gt; as core..future..future..Future&gt;::poll (120 samples, 0.11%)</title><rect x="1187.7" y="309" width="1.3" height="15.0" fill="rgb(214,144,42)" rx="2" ry="2" />
<text  x="1190.74" y="319.5" ></text>
</g>
<g >
<title>deno_core::errors::JSError::from_v8_exception (18 samples, 0.02%)</title><rect x="1187.5" y="245" width="0.2" height="15.0" fill="rgb(230,44,52)" rx="2" ry="2" />
<text  x="1190.53" y="255.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::expr::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_assignment_expr_base (19 samples, 0.02%)</title><rect x="1188.2" y="101" width="0.3" height="15.0" fill="rgb(222,134,16)" rx="2" ry="2" />
<text  x="1191.24" y="111.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::stmt::_&lt;impl swc_ecma_parser..parser..Parser&lt;I&gt;&gt;::parse_block_body (49 samples, 0.04%)</title><rect x="1187.9" y="165" width="0.6" height="15.0" fill="rgb(211,90,19)" rx="2" ry="2" />
<text  x="1190.92" y="175.5" ></text>
</g>
<g >
<title>swc_ecma_parser::parser::Parser&lt;I&gt;::parse_module (52 samples, 0.05%)</title><rect x="1187.9" y="181" width="0.6" height="15.0" fill="rgb(229,30,29)" rx="2" ry="2" />
<text  x="1190.89" y="191.5" ></text>
</g>
</g>
</svg>
